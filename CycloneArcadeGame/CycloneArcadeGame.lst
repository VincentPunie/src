
CycloneArcadeGame.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	f0 2c 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	f0 2c 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	f0 2c 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	f0 2c 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	f0 2c 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	f0 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	f0 2c 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	f0 2c 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	f0 2c 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	f0 2c 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	f0 2c 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	f0 2c 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	f0 2c 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	f0 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	f0 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	f0 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	f0 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	f0 2c 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	f0 2c 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	f0 2c 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	f0 2c 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	f0 2c 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	f0 2c 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	f0 2c 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f a8 20    	mov.w     #0xa80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	7b 00 07    	rcall     0x121c <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	80 cc 22    	mov.w     #0x2cc8, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	6c 29 02    	call      0x296c <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	a0 06 20    	mov.w     #0x6a, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	10 1e 04    	goto      0x1e10 <_usb_set_address_callback>
    1216:	00 00 00 
    1218:	52 26 04    	goto      0x2652 <_usb_send_data_packet>
    121a:	00 00 00 

0000121c <__crt_start_mode>:
    121c:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	9c 2c 04    	goto      0x2c9c <.LFE1>
    10ee:	00 00 00 
    10f0:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	f0 2c 04    	goto      0x2cf0 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000921e <_Device>:
    921e:	12 01       	.word 0x112
    9220:	00 02       	.word 0x200
    9222:	00 00       	.word 0
    9224:	00 40       	.word 0x4000
    9226:	66 66       	.word 0x6666
    9228:	03 00       	.word 0x3
    922a:	00 00       	.word 0
    922c:	01 02       	.word 0x201
    922e:	00 01       	.word 0x100

00009230 <_Configuration1>:
    9230:	09 02       	.word 0x209
    9232:	12 00       	.word 0x12
    9234:	01 01       	.word 0x101
    9236:	00 a0       	.word 0xa000
    9238:	32 09       	.word 0x932
    923a:	04 00       	.word 0x4
    923c:	00 00       	.word 0
    923e:	ff 00       	.word 0xff
    9240:	ff 00       	.word 0xff

00009242 <_Configurations>:
    9242:	30 92       	.word 0x9230

00009244 <_String0>:
    9244:	04 03       	.word 0x304
    9246:	09 04       	.word 0x409

00009248 <_String1>:
    9248:	1a 03       	.word 0x31a
    924a:	4f 00       	.word 0x4f
    924c:	6c 00       	.word 0x6c
    924e:	69 00       	.word 0x69
    9250:	6e 00       	.word 0x6e
    9252:	20 00       	.word 0x20
    9254:	43 00       	.word 0x43
    9256:	6f 00       	.word 0x6f
    9258:	6c 00       	.word 0x6c
    925a:	6c 00       	.word 0x6c
    925c:	65 00       	.word 0x65
    925e:	67 00       	.word 0x67
    9260:	65 00       	.word 0x65

00009262 <_String2>:
    9262:	20 03       	.word 0x320
    9264:	50 00       	.word 0x50
    9266:	49 00       	.word 0x49
    9268:	43 00       	.word 0x43
    926a:	32 00       	.word 0x32
    926c:	34 00       	.word 0x34
    926e:	46 00       	.word 0x46
    9270:	4a 00       	.word 0x4a
    9272:	31 00       	.word 0x31
    9274:	32 00       	.word 0x32
    9276:	38 00       	.word 0x38
    9278:	47 00       	.word 0x47
    927a:	42 00       	.word 0x42
    927c:	32 00       	.word 0x32
    927e:	30 00       	.word 0x30
    9280:	36 00       	.word 0x36

00009282 <_Strings>:
    9282:	44 92       	.word 0x9244
    9284:	48 92       	.word 0x9248
    9286:	62 92       	.word 0x9262
Disassembly of section .text:

00001288 <_init_ws2812b>:

#define WS2812B_OUT         D0
#define WS2812B_DIR         D0_DIR

void init_ws2812b(void) {
    1288:	00 00 fa    	lnk       #0x0
    WS2812B_DIR = OUT;
    128a:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    WS2812B_OUT = 0;
    128c:	da a2 a9    	bclr.b    0x2da, #0x5
}
    128e:	00 80 fa    	ulnk      
    1290:	00 00 06    	return    

00001292 <_ws2812b_write>:

void ws2812b_write(uint8_t red, uint8_t green, uint8_t blue) {
    1292:	04 00 fa    	lnk       #0x4
    1294:	00 4f 78    	mov.b     w0, [w14]
    1296:	11 47 98    	mov.b     w1, [w14+1]
    1298:	22 47 98    	mov.b     w2, [w14+2]
    // The complier loads red into register W0, green into register W1,
    // and blue into register W2.

    // Write green, bit 7
    WS2812B_OUT = 1;
    129a:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #7"); // 6
    12a6:	01 70 a6    	btss.w    w1, #0x7
    WS2812B_OUT = 0;        // 7
    12a8:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    12b4:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write green, bit 6
    WS2812B_OUT = 1;
    12c0:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #6"); // 6
    12cc:	01 60 a6    	btss.w    w1, #0x6
    WS2812B_OUT = 0;        // 7
    12ce:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    12da:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write green, bit 5
    WS2812B_OUT = 1;
    12e6:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #5"); // 6
    12f2:	01 50 a6    	btss.w    w1, #0x5
    WS2812B_OUT = 0;        // 7
    12f4:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1300:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write green, bit 4
    WS2812B_OUT = 1;
    130c:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #4"); // 6
    1318:	01 40 a6    	btss.w    w1, #0x4
    WS2812B_OUT = 0;        // 7
    131a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1326:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write green, bit 3
    WS2812B_OUT = 1;
    1332:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #3"); // 6
    133e:	01 30 a6    	btss.w    w1, #0x3
    WS2812B_OUT = 0;        // 7
    1340:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    134c:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write green, bit 2
    WS2812B_OUT = 1;
    1358:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #2"); // 6
    1364:	01 20 a6    	btss.w    w1, #0x2
    WS2812B_OUT = 0;        // 7
    1366:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1372:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write green, bit 1
    WS2812B_OUT = 1;
    137e:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #1"); // 6
    138a:	01 10 a6    	btss.w    w1, #0x1
    WS2812B_OUT = 0;        // 7
    138c:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1398:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write green, bit 0
    WS2812B_OUT = 1;
    13a4:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W1, #0"); // 6
    13b0:	01 00 a6    	btss.w    w1, #0x0
    WS2812B_OUT = 0;        // 7
    13b2:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    13be:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 7
    WS2812B_OUT = 1;
    13ca:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #7"); // 6
    13d6:	00 70 a6    	btss.w    w0, #0x7
    WS2812B_OUT = 0;        // 7
    13d8:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    13e4:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 6
    WS2812B_OUT = 1;
    13f0:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #6"); // 6
    13fc:	00 60 a6    	btss.w    w0, #0x6
    WS2812B_OUT = 0;        // 7
    13fe:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    140a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 5
    WS2812B_OUT = 1;
    1416:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #5"); // 6
    1422:	00 50 a6    	btss.w    w0, #0x5
    WS2812B_OUT = 0;        // 7
    1424:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1430:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 4
    WS2812B_OUT = 1;
    143c:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #4"); // 6
    1448:	00 40 a6    	btss.w    w0, #0x4
    WS2812B_OUT = 0;        // 7
    144a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1456:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 3
    WS2812B_OUT = 1;
    1462:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #3"); // 6
    146e:	00 30 a6    	btss.w    w0, #0x3
    WS2812B_OUT = 0;        // 7
    1470:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    147c:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 2
    WS2812B_OUT = 1;
    1488:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #2"); // 6
    1494:	00 20 a6    	btss.w    w0, #0x2
    WS2812B_OUT = 0;        // 7
    1496:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    14a2:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 1
    WS2812B_OUT = 1;
    14ae:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #1"); // 6
    14ba:	00 10 a6    	btss.w    w0, #0x1
    WS2812B_OUT = 0;        // 7
    14bc:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    14c8:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write red, bit 0
    WS2812B_OUT = 1;
    14d4:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W0, #0"); // 6
    14e0:	00 00 a6    	btss.w    w0, #0x0
    WS2812B_OUT = 0;        // 7
    14e2:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    14ee:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 7
    WS2812B_OUT = 1;
    14fa:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #7"); // 6
    1506:	02 70 a6    	btss.w    w2, #0x7
    WS2812B_OUT = 0;        // 7
    1508:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1514:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 6
    WS2812B_OUT = 1;
    1520:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #6"); // 6
    152c:	02 60 a6    	btss.w    w2, #0x6
    WS2812B_OUT = 0;        // 7
    152e:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    153a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 5
    WS2812B_OUT = 1;
    1546:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #5"); // 6
    1552:	02 50 a6    	btss.w    w2, #0x5
    WS2812B_OUT = 0;        // 7
    1554:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1560:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 4
    WS2812B_OUT = 1;
    156c:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #4"); // 6
    1578:	02 40 a6    	btss.w    w2, #0x4
    WS2812B_OUT = 0;        // 7
    157a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    1586:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 3
    WS2812B_OUT = 1;
    1592:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #3"); // 6
    159e:	02 30 a6    	btss.w    w2, #0x3
    WS2812B_OUT = 0;        // 7
    15a0:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    15ac:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 2
    WS2812B_OUT = 1;
    15b8:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #2"); // 6
    15c4:	02 20 a6    	btss.w    w2, #0x2
    WS2812B_OUT = 0;        // 7
    15c6:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    15d2:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 1
    WS2812B_OUT = 1;
    15de:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #1"); // 6
    15ea:	02 10 a6    	btss.w    w2, #0x1
    WS2812B_OUT = 0;        // 7
    15ec:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    15f8:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18

    // Write blue, bit 0
    WS2812B_OUT = 1;
    1604:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("btss W2, #0"); // 6
    1610:	02 00 a6    	btss.w    w2, #0x0
    WS2812B_OUT = 0;        // 7
    1612:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    WS2812B_OUT = 0;        // 13
    161e:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
}
    162a:	00 80 fa    	ulnk      
    162c:	00 00 06    	return    

0000162e <_ws2812b_clear>:

void ws2812b_clear(uint16_t num) {
    162e:	04 00 fa    	lnk       #0x4
    1630:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t i;

    disable_interrupts();
    1632:	ff 3f fc    	disi      #0x3fff
    for (i = 0; i < num; i++)
    1634:	00 00 eb    	clr.w     w0
    1636:	00 0f 78    	mov.w     w0, [w14]
    1638:	05 00 37    	bra       0x1644 <.L4>

0000163a <.L5>:
        ws2812b_write(0, 0, 0);
    163a:	00 41 eb    	clr.b     w2
    163c:	80 40 eb    	clr.b     w1
    163e:	00 40 eb    	clr.b     w0
    1640:	28 fe 07    	rcall     0x1292 <_ws2812b_write> <.LFB1> <.LFE0>
    1642:	1e 0f e8    	inc.w     [w14], [w14]

00001644 <.L4>:
    1644:	1e 00 90    	mov.w     [w14+2], w0
    1646:	9e 00 78    	mov.w     [w14], w1
    1648:	80 8f 50    	sub.w     w1, w0, [w15]
    164a:	f7 ff 39    	bra       NC, 0x163a <.L5>
    enable_interrupts();
    164c:	52 20 ef    	clr.w     0x52
}
    164e:	00 80 fa    	ulnk      
    1650:	00 00 06    	return    

00001652 <_ws2811_write>:

void ws2811_write(uint8_t red, uint8_t green, uint8_t blue) {
    1652:	04 00 fa    	lnk       #0x4
    1654:	00 4f 78    	mov.b     w0, [w14]
    1656:	11 47 98    	mov.b     w1, [w14+1]
    1658:	22 47 98    	mov.b     w2, [w14+2]
    // The complier loads red into register W0, green into register W1,
    // and blue into register W2.

    // Write green, bit 7
    WS2812B_OUT = 1;
    165a:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #7"); // 6
    166a:	01 70 a6    	btss.w    w1, #0x7
    WS2812B_OUT = 0;        // 7
    166c:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1680:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write green, bit 6
    WS2812B_OUT = 1;
    16a8:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #6"); // 6
    16b8:	01 60 a6    	btss.w    w1, #0x6
    WS2812B_OUT = 0;        // 7
    16ba:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    16ce:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write green, bit 5
    WS2812B_OUT = 1;
    16f6:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #5"); // 6
    1706:	01 50 a6    	btss.w    w1, #0x5
    WS2812B_OUT = 0;        // 7
    1708:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    171c:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write green, bit 4
    WS2812B_OUT = 1;
    1744:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #4"); // 6
    1754:	01 40 a6    	btss.w    w1, #0x4
    WS2812B_OUT = 0;        // 7
    1756:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    176a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write green, bit 3
    WS2812B_OUT = 1;
    1792:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #3"); // 6
    17a2:	01 30 a6    	btss.w    w1, #0x3
    WS2812B_OUT = 0;        // 7
    17a4:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    17b8:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write green, bit 2
    WS2812B_OUT = 1;
    17e0:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #2"); // 6
    17f0:	01 20 a6    	btss.w    w1, #0x2
    WS2812B_OUT = 0;        // 7
    17f2:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1806:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write green, bit 1
    WS2812B_OUT = 1;
    182e:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #1"); // 6
    183e:	01 10 a6    	btss.w    w1, #0x1
    WS2812B_OUT = 0;        // 7
    1840:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1854:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write green, bit 0
    WS2812B_OUT = 1;
    187c:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W1, #0"); // 6
    188c:	01 00 a6    	btss.w    w1, #0x0
    WS2812B_OUT = 0;        // 7
    188e:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    18a2:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 7
    WS2812B_OUT = 1;
    18ca:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #7"); // 6
    18da:	00 70 a6    	btss.w    w0, #0x7
    WS2812B_OUT = 0;        // 7
    18dc:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    18f0:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 6
    WS2812B_OUT = 1;
    1918:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #6"); // 6
    1928:	00 60 a6    	btss.w    w0, #0x6
    WS2812B_OUT = 0;        // 7
    192a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    193e:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 5
    WS2812B_OUT = 1;
    1966:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #5"); // 6
    1976:	00 50 a6    	btss.w    w0, #0x5
    WS2812B_OUT = 0;        // 7
    1978:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    198c:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 4
    WS2812B_OUT = 1;
    19b4:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #4"); // 6
    19c4:	00 40 a6    	btss.w    w0, #0x4
    WS2812B_OUT = 0;        // 7
    19c6:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    19da:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 3
    WS2812B_OUT = 1;
    1a02:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #3"); // 6
    1a12:	00 30 a6    	btss.w    w0, #0x3
    WS2812B_OUT = 0;        // 7
    1a14:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1a28:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 2
    WS2812B_OUT = 1;
    1a50:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #2"); // 6
    1a60:	00 20 a6    	btss.w    w0, #0x2
    WS2812B_OUT = 0;        // 7
    1a62:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1a76:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 1
    WS2812B_OUT = 1;
    1a9e:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #1"); // 6
    1aae:	00 10 a6    	btss.w    w0, #0x1
    WS2812B_OUT = 0;        // 7
    1ab0:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1ac4:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write red, bit 0
    WS2812B_OUT = 1;
    1aec:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W0, #0"); // 6
    1afc:	00 00 a6    	btss.w    w0, #0x0
    WS2812B_OUT = 0;        // 7
    1afe:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1b12:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 7
    WS2812B_OUT = 1;
    1b3a:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #7"); // 6
    1b4a:	02 70 a6    	btss.w    w2, #0x7
    WS2812B_OUT = 0;        // 7
    1b4c:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1b60:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 6
    WS2812B_OUT = 1;
    1b88:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #6"); // 6
    1b98:	02 60 a6    	btss.w    w2, #0x6
    WS2812B_OUT = 0;        // 7
    1b9a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1bae:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 5
    WS2812B_OUT = 1;
    1bd6:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #5"); // 6
    1be6:	02 50 a6    	btss.w    w2, #0x5
    WS2812B_OUT = 0;        // 7
    1be8:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1bfc:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 4
    WS2812B_OUT = 1;
    1c24:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #4"); // 6
    1c34:	02 40 a6    	btss.w    w2, #0x4
    WS2812B_OUT = 0;        // 7
    1c36:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1c4a:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 3
    WS2812B_OUT = 1;
    1c72:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #3"); // 6
    1c82:	02 30 a6    	btss.w    w2, #0x3
    WS2812B_OUT = 0;        // 7
    1c84:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1c98:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 2
    WS2812B_OUT = 1;
    1cc0:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #2"); // 6
    1cd0:	02 20 a6    	btss.w    w2, #0x2
    WS2812B_OUT = 0;        // 7
    1cd2:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1ce6:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 1
    WS2812B_OUT = 1;
    1d0e:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #1"); // 6
    1d1e:	02 10 a6    	btss.w    w2, #0x1
    WS2812B_OUT = 0;        // 7
    1d20:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1d34:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");

    // Write blue, bit 0
    WS2812B_OUT = 1;
    1d5c:	da a2 a8    	bset.b    0x2da, #0x5
	...
    __asm__("nop");         // 1
    __asm__("nop");         // 2
    __asm__("nop");         // 3
    __asm__("nop");         // 4
    __asm__("nop");         // 5
    __asm__("nop");
    __asm__("nop");
    __asm__("btss W2, #0"); // 6
    1d6c:	02 00 a6    	btss.w    w2, #0x0
    WS2812B_OUT = 0;        // 7
    1d6e:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 8
    __asm__("nop");         // 9
    __asm__("nop");         // 10
    __asm__("nop");         // 11
    __asm__("nop");         // 12
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    WS2812B_OUT = 0;        // 13
    1d82:	da a2 a9    	bclr.b    0x2da, #0x5
	...
    __asm__("nop");         // 14
    __asm__("nop");         // 15
    __asm__("nop");         // 16
    __asm__("nop");         // 17
    __asm__("nop");         // 18
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
}
    1daa:	00 80 fa    	ulnk      
    1dac:	00 00 06    	return    

00001dae <_ws2811_clear>:

void ws2811_clear(uint16_t num) {
    1dae:	04 00 fa    	lnk       #0x4
    1db0:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t i;

    disable_interrupts();
    1db2:	ff 3f fc    	disi      #0x3fff
    for (i = 0; i < num; i++)
    1db4:	00 00 eb    	clr.w     w0
    1db6:	00 0f 78    	mov.w     w0, [w14]
    1db8:	05 00 37    	bra       0x1dc4 <.L8>

00001dba <.L9>:
        ws2811_write(0, 0, 0);
    1dba:	00 41 eb    	clr.b     w2
    1dbc:	80 40 eb    	clr.b     w1
    1dbe:	00 40 eb    	clr.b     w0
    1dc0:	48 fc 07    	rcall     0x1652 <_ws2811_write> <.LFB3> <.LFE2>
    1dc2:	1e 0f e8    	inc.w     [w14], [w14]

00001dc4 <.L8>:
    1dc4:	1e 00 90    	mov.w     [w14+2], w0
    1dc6:	9e 00 78    	mov.w     [w14], w1
    1dc8:	80 8f 50    	sub.w     w1, w0, [w15]
    1dca:	f7 ff 39    	bra       NC, 0x1dba <.L9>
    enable_interrupts();
    1dcc:	52 20 ef    	clr.w     0x52
}
    1dce:	00 80 fa    	ulnk      
    1dd0:	00 00 06    	return    

00001dd2 <_usb_disable_endpoints>:
    1dd2:	06 00 fa    	lnk       #0x6
    1dd4:	40 47 98    	mov.b     w0, [w14+4]
    1dd6:	a0 4a 20    	mov.w     #0x4aa, w0
    1dd8:	10 07 98    	mov.w     w0, [w14+2]
    1dda:	ce 40 90    	mov.b     [w14+4], w1
    1ddc:	01 4f 78    	mov.b     w1, [w14]
    1dde:	13 00 37    	bra       0x1e06 <.L3>

00001de0 <.L4>:
    1de0:	1e 80 fb    	ze        [w14], w0
    1de2:	00 00 40    	add.w     w0, w0, w0
    1de4:	9e 00 90    	mov.w     [w14+2], w1
    1de6:	00 80 40    	add.w     w1, w0, w0
    1de8:	80 00 eb    	clr.w     w1
    1dea:	01 08 78    	mov.w     w1, [w0]
    1dec:	1e 80 fb    	ze        [w14], w0
    1dee:	80 00 40    	add.w     w0, w0, w1
    1df0:	20 8b 20    	mov.w     #0x8b2, w0
    1df2:	00 80 40    	add.w     w1, w0, w0
    1df4:	80 00 eb    	clr.w     w1
    1df6:	01 08 78    	mov.w     w1, [w0]
    1df8:	1e 80 fb    	ze        [w14], w0
    1dfa:	80 00 40    	add.w     w0, w0, w1
    1dfc:	20 8d 20    	mov.w     #0x8d2, w0
    1dfe:	00 80 40    	add.w     w1, w0, w0
    1e00:	80 00 eb    	clr.w     w1
    1e02:	01 08 78    	mov.w     w1, [w0]
    1e04:	1e 4f e8    	inc.b     [w14], [w14]

00001e06 <.L3>:
    1e06:	1e 40 78    	mov.b     [w14], w0
    1e08:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1e0a:	ea ff 36    	bra       LEU, 0x1de0 <.L4>
    1e0c:	00 80 fa    	ulnk      
    1e0e:	00 00 06    	return    

00001e10 <_usb_set_address_callback>:
    1e10:	00 00 fa    	lnk       #0x0
    1e12:	60 8a 20    	mov.w     #0x8a6, w0
    1e14:	10 40 78    	mov.b     [w0], w0
    1e16:	00 80 fb    	ze        w0, w0
    1e18:	b0 24 88    	mov.w     w0, 0x496
    1e1a:	b0 24 80    	mov.w     0x496, w0
    1e1c:	00 00 e0    	cp0.w     w0
    1e1e:	03 00 3a    	bra       NZ, 0x1e26 <.L9>
    1e20:	10 c0 b3    	mov.b     #0x1, w0
    1e22:	10 e8 b7    	mov.b     WREG, 0x810
    1e24:	02 00 37    	bra       0x1e2a <.L8>

00001e26 <.L9>:
    1e26:	20 c0 b3    	mov.b     #0x2, w0
    1e28:	10 e8 b7    	mov.b     WREG, 0x810

00001e2a <.L8>:
    1e2a:	00 00 eb    	clr.w     w0
    1e2c:	90 45 88    	mov.w     w0, 0x8b2
    1e2e:	00 80 fa    	ulnk      
    1e30:	00 00 06    	return    

00001e32 <_init_usb>:
    1e32:	00 00 fa    	lnk       #0x0
    1e34:	9e c0 a9    	bclr.b    0x9e, #0x6
    1e36:	94 24 a8    	bset.b    0x494, #0x1
    1e38:	96 24 ef    	clr.w     0x496
    1e3a:	f0 0f 20    	mov.w     #0xff, w0
    1e3c:	70 24 88    	mov.w     w0, 0x48e
    1e3e:	94 24 a9    	bclr.b    0x494, #0x1
    1e40:	00 40 eb    	clr.b     w0
    1e42:	c7 ff 07    	rcall     0x1dd2 <_usb_disable_endpoints> <.L0> <.LFB1> <.LFE4> <.Letext0> <.Ltext0>
    1e44:	d0 00 20    	mov.w     #0xd, w0
    1e46:	50 25 88    	mov.w     w0, 0x4aa
    1e48:	00 a0 20    	mov.w     #0xa00, w0
    1e4a:	01 c4 b3    	mov.b     #0x40, w1
    1e4c:	01 48 78    	mov.b     w1, [w0]
    1e4e:	40 82 20    	mov.w     #0x824, w0
    1e50:	10 50 88    	mov.w     w0, 0xa02
    1e52:	10 a0 20    	mov.w     #0xa01, w0
    1e54:	81 c8 b3    	mov.b     #0x88, w1
    1e56:	01 48 78    	mov.b     w1, [w0]
    1e58:	40 86 20    	mov.w     #0x864, w0
    1e5a:	30 50 88    	mov.w     w0, 0xa06
    1e5c:	50 a0 20    	mov.w     #0xa05, w0
    1e5e:	81 c0 b3    	mov.b     #0x8, w1
    1e60:	01 48 78    	mov.b     w1, [w0]
    1e62:	a6 24 ef    	clr.w     0x4a6
    1e64:	a8 24 ef    	clr.w     0x4a8
    1e66:	00 a0 20    	mov.w     #0xa00, w0
    1e68:	48 00 de    	lsr.w     w0, #0x8, w0
    1e6a:	c0 24 88    	mov.w     w0, 0x498
    1e6c:	86 44 a8    	bset.b    0x486, #0x2
    1e6e:	86 e4 a8    	bset.b    0x486, #0x7
    1e70:	88 04 a8    	bset.b    0x488, #0x0
    1e72:	94 a4 a9    	bclr.b    0x494, #0x5
    1e74:	0d 68 ef    	clr.b     0x80d
    1e76:	10 68 ef    	clr.b     0x810
    1e78:	10 c0 b3    	mov.b     #0x1, w0
    1e7a:	0e e8 b7    	mov.b     WREG, 0x80e
    1e7c:	40 8a 20    	mov.w     #0x8a4, w0
    1e7e:	80 c0 eb    	setm.b    w1
    1e80:	01 48 78    	mov.b     w1, [w0]
    1e82:	50 8a 20    	mov.w     #0x8a5, w0
    1e84:	80 c0 eb    	setm.b    w1
    1e86:	01 48 78    	mov.b     w1, [w0]
    1e88:	00 00 eb    	clr.w     w0
    1e8a:	70 45 88    	mov.w     w0, 0x8ae
    1e8c:	00 00 eb    	clr.w     w0
    1e8e:	80 45 88    	mov.w     w0, 0x8b0
    1e90:	00 00 00    	nop       

00001e92 <.L11>:
    1e92:	a1 24 80    	mov.w     0x494, w1
    1e94:	00 04 20    	mov.w     #0x40, w0
    1e96:	00 80 60    	and.w     w1, w0, w0
    1e98:	00 00 e0    	cp0.w     w0
    1e9a:	fb ff 3a    	bra       NZ, 0x1e92 <.L11>
    1e9c:	f0 0f 20    	mov.w     #0xff, w0
    1e9e:	60 24 88    	mov.w     w0, 0x48c
    1ea0:	f0 0f 20    	mov.w     #0xff, w0
    1ea2:	80 24 88    	mov.w     w0, 0x490
    1ea4:	8e c0 a9    	bclr.b    0x8e, #0x6
    1ea6:	9e c0 a8    	bset.b    0x9e, #0x6
    1ea8:	00 80 fa    	ulnk      
    1eaa:	00 00 06    	return    

00001eac <_usb_service>:
    1eac:	04 00 fa    	lnk       #0x4
    1eae:	50 24 80    	mov.w     0x48a, w0
    1eb0:	62 00 60    	and.w     w0, #0x2, w0
    1eb2:	00 00 e0    	cp0.w     w0
    1eb4:	05 00 32    	bra       Z, 0x1ec0 <.L13>
    1eb6:	f0 0f 20    	mov.w     #0xff, w0
    1eb8:	70 24 88    	mov.w     w0, 0x48e
    1eba:	20 00 20    	mov.w     #0x2, w0
    1ebc:	50 24 88    	mov.w     w0, 0x48a
    1ebe:	ba 00 37    	bra       0x2034 <.L14>

00001ec0 <.L13>:
    1ec0:	50 24 80    	mov.w     0x48a, w0
    1ec2:	64 00 60    	and.w     w0, #0x4, w0
    1ec4:	00 00 e0    	cp0.w     w0
    1ec6:	03 00 32    	bra       Z, 0x1ece <.L15>
    1ec8:	40 00 20    	mov.w     #0x4, w0
    1eca:	50 24 88    	mov.w     w0, 0x48a
    1ecc:	b3 00 37    	bra       0x2034 <.L14>

00001ece <.L15>:
    1ece:	50 24 80    	mov.w     0x48a, w0
    1ed0:	70 00 60    	and.w     w0, #0x10, w0
    1ed2:	00 00 e0    	cp0.w     w0
    1ed4:	03 00 32    	bra       Z, 0x1edc <.L16>
    1ed6:	00 01 20    	mov.w     #0x10, w0
    1ed8:	50 24 88    	mov.w     w0, 0x48a
    1eda:	ac 00 37    	bra       0x2034 <.L14>

00001edc <.L16>:
    1edc:	51 24 80    	mov.w     0x48a, w1
    1ede:	00 02 20    	mov.w     #0x20, w0
    1ee0:	00 80 60    	and.w     w1, w0, w0
    1ee2:	00 00 e0    	cp0.w     w0
    1ee4:	03 00 32    	bra       Z, 0x1eec <.L17>
    1ee6:	00 02 20    	mov.w     #0x20, w0
    1ee8:	50 24 88    	mov.w     w0, 0x48a
    1eea:	a4 00 37    	bra       0x2034 <.L14>

00001eec <.L17>:
    1eec:	51 24 80    	mov.w     0x48a, w1
    1eee:	00 08 20    	mov.w     #0x80, w0
    1ef0:	00 80 60    	and.w     w1, w0, w0
    1ef2:	00 00 e0    	cp0.w     w0
    1ef4:	03 00 32    	bra       Z, 0x1efc <.L18>
    1ef6:	00 08 20    	mov.w     #0x80, w0
    1ef8:	50 24 88    	mov.w     w0, 0x48a
    1efa:	9c 00 37    	bra       0x2034 <.L14>

00001efc <.L18>:
    1efc:	50 24 80    	mov.w     0x48a, w0
    1efe:	61 00 60    	and.w     w0, #0x1, w0
    1f00:	00 00 e0    	cp0.w     w0
    1f02:	27 00 32    	bra       Z, 0x1f52 <.L19>
    1f04:	0d 68 ef    	clr.b     0x80d
    1f06:	08 00 37    	bra       0x1f18 <.L20>

00001f08 <.L21>:
    1f08:	80 00 20    	mov.w     #0x8, w0
    1f0a:	50 24 88    	mov.w     w0, 0x48a
	...

00001f18 <.L20>:
    1f18:	50 24 80    	mov.w     0x48a, w0
    1f1a:	68 00 60    	and.w     w0, #0x8, w0
    1f1c:	00 00 e0    	cp0.w     w0
    1f1e:	f4 ff 3a    	bra       NZ, 0x1f08 <.L21>
    1f20:	00 40 eb    	clr.b     w0
    1f22:	57 ff 07    	rcall     0x1dd2 <_usb_disable_endpoints> <.L0> <.LFB1> <.LFE4> <.Letext0> <.Ltext0>
    1f24:	00 a0 20    	mov.w     #0xa00, w0
    1f26:	01 c4 b3    	mov.b     #0x40, w1
    1f28:	01 48 78    	mov.b     w1, [w0]
    1f2a:	40 82 20    	mov.w     #0x824, w0
    1f2c:	10 50 88    	mov.w     w0, 0xa02
    1f2e:	10 a0 20    	mov.w     #0xa01, w0
    1f30:	81 c8 b3    	mov.b     #0x88, w1
    1f32:	01 48 78    	mov.b     w1, [w0]
    1f34:	40 86 20    	mov.w     #0x864, w0
    1f36:	30 50 88    	mov.w     w0, 0xa06
    1f38:	50 a0 20    	mov.w     #0xa05, w0
    1f3a:	81 c0 b3    	mov.b     #0x8, w1
    1f3c:	01 48 78    	mov.b     w1, [w0]
    1f3e:	96 24 ef    	clr.w     0x496
    1f40:	f0 0f 20    	mov.w     #0xff, w0
    1f42:	50 24 88    	mov.w     w0, 0x48a
    1f44:	d0 00 20    	mov.w     #0xd, w0
    1f46:	50 25 88    	mov.w     w0, 0x4aa
    1f48:	10 c0 b3    	mov.b     #0x1, w0
    1f4a:	10 e8 b7    	mov.b     WREG, 0x810
    1f4c:	10 c0 b3    	mov.b     #0x1, w0
    1f4e:	0e e8 b7    	mov.b     WREG, 0x80e
    1f50:	71 00 37    	bra       0x2034 <.L14>

00001f52 <.L19>:
    1f52:	50 24 80    	mov.w     0x48a, w0
    1f54:	68 00 60    	and.w     w0, #0x8, w0
    1f56:	00 00 e0    	cp0.w     w0
    1f58:	6d 00 32    	bra       Z, 0x2034 <.L14>
    1f5a:	90 24 80    	mov.w     0x492, w0
    1f5c:	43 00 de    	lsr.w     w0, #0x3, w0
    1f5e:	c2 00 dd    	sl.w      w0, #0x2, w1
    1f60:	00 a0 20    	mov.w     #0xa00, w0
    1f62:	00 8f 40    	add.w     w1, w0, [w14]
    1f64:	1e 00 78    	mov.w     [w14], w0
    1f66:	10 40 90    	mov.b     [w0+1], w0
    1f68:	01 e8 b7    	mov.b     WREG, 0x801
    1f6a:	1e 00 78    	mov.w     [w14], w0
    1f6c:	10 40 78    	mov.b     [w0], w0
    1f6e:	00 e8 b7    	mov.b     WREG, 0x800
    1f70:	1e 00 78    	mov.w     [w14], w0
    1f72:	10 00 90    	mov.w     [w0+2], w0
    1f74:	10 40 88    	mov.w     w0, 0x802
    1f76:	90 24 80    	mov.w     0x492, w0
    1f78:	00 40 78    	mov.b     w0, w0
    1f7a:	0f e8 b7    	mov.b     WREG, 0x80f
    1f7c:	80 00 20    	mov.w     #0x8, w0
    1f7e:	50 24 88    	mov.w     w0, 0x48a
    1f80:	0c 68 ef    	clr.b     0x80c
    1f82:	01 c8 bf    	mov.b     0x801, WREG
    1f84:	80 80 fb    	ze        w0, w1
    1f86:	c0 03 20    	mov.w     #0x3c, w0
    1f88:	00 80 60    	and.w     w1, w0, w0
    1f8a:	41 02 20    	mov.w     #0x24, w1
    1f8c:	81 0f 50    	sub.w     w0, w1, [w15]
    1f8e:	08 00 32    	bra       Z, 0x1fa0 <.L24>
    1f90:	41 03 20    	mov.w     #0x34, w1
    1f92:	81 0f 50    	sub.w     w0, w1, [w15]
    1f94:	03 00 32    	bra       Z, 0x1f9c <.L25>
    1f96:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1f98:	17 00 32    	bra       Z, 0x1fc8 <.L23>
    1f9a:	3d 00 37    	bra       0x2016 <.L22>

00001f9c <.L25>:
    1f9c:	4e 00 07    	rcall     0x203a <_usb_process_setup_token> <.LFB5> <.LFE4>
    1f9e:	3b 00 37    	bra       0x2016 <.L22>

00001fa0 <.L24>:
    1fa0:	0f c8 bf    	mov.b     0x80f, WREG
    1fa2:	00 80 fb    	ze        w0, w0
    1fa4:	44 00 de    	lsr.w     w0, #0x4, w0
    1fa6:	20 47 98    	mov.b     w0, [w14+2]
    1fa8:	2e 40 90    	mov.b     [w14+2], w0
    1faa:	00 80 fb    	ze        w0, w0
    1fac:	80 00 40    	add.w     w0, w0, w1
    1fae:	20 8b 20    	mov.w     #0x8b2, w0
    1fb0:	00 80 40    	add.w     w1, w0, w0
    1fb2:	10 00 78    	mov.w     [w0], w0
    1fb4:	00 00 e0    	cp0.w     w0
    1fb6:	2e 00 32    	bra       Z, 0x2014 <.L28>
    1fb8:	2e 40 90    	mov.b     [w14+2], w0
    1fba:	00 80 fb    	ze        w0, w0
    1fbc:	80 00 40    	add.w     w0, w0, w1
    1fbe:	20 8b 20    	mov.w     #0x8b2, w0
    1fc0:	00 80 40    	add.w     w1, w0, w0
    1fc2:	10 00 78    	mov.w     [w0], w0
    1fc4:	00 00 01    	call      w0
    1fc6:	27 00 37    	bra       0x2016 <.L22>

00001fc8 <.L23>:
    1fc8:	0f c8 bf    	mov.b     0x80f, WREG
    1fca:	00 80 fb    	ze        w0, w0
    1fcc:	44 00 de    	lsr.w     w0, #0x4, w0
    1fce:	20 47 98    	mov.b     w0, [w14+2]
    1fd0:	2e 40 90    	mov.b     [w14+2], w0
    1fd2:	00 80 fb    	ze        w0, w0
    1fd4:	80 00 40    	add.w     w0, w0, w1
    1fd6:	20 8d 20    	mov.w     #0x8d2, w0
    1fd8:	00 80 40    	add.w     w1, w0, w0
    1fda:	10 00 78    	mov.w     [w0], w0
    1fdc:	00 00 e0    	cp0.w     w0
    1fde:	07 00 32    	bra       Z, 0x1fee <.L27>
    1fe0:	2e 40 90    	mov.b     [w14+2], w0
    1fe2:	00 80 fb    	ze        w0, w0
    1fe4:	80 00 40    	add.w     w0, w0, w1
    1fe6:	20 8d 20    	mov.w     #0x8d2, w0
    1fe8:	00 80 40    	add.w     w1, w0, w0
    1fea:	10 00 78    	mov.w     [w0], w0
    1fec:	00 00 01    	call      w0

00001fee <.L27>:
    1fee:	2e 40 90    	mov.b     [w14+2], w0
    1ff0:	00 04 e0    	cp0.b     w0
    1ff2:	11 00 3a    	bra       NZ, 0x2016 <.L22>
    1ff4:	70 45 80    	mov.w     0x8ae, w0
    1ff6:	00 00 e0    	cp0.w     w0
    1ff8:	0e 00 3a    	bra       NZ, 0x2016 <.L22>
    1ffa:	00 a0 20    	mov.w     #0xa00, w0
    1ffc:	01 c4 b3    	mov.b     #0x40, w1
    1ffe:	01 48 78    	mov.b     w1, [w0]
    2000:	10 a0 20    	mov.w     #0xa01, w0
    2002:	81 c8 b3    	mov.b     #0x88, w1
    2004:	01 48 78    	mov.b     w1, [w0]
    2006:	40 a0 20    	mov.w     #0xa04, w0
    2008:	80 40 eb    	clr.b     w1
    200a:	01 48 78    	mov.b     w1, [w0]
    200c:	50 a0 20    	mov.w     #0xa05, w0
    200e:	81 cc b3    	mov.b     #0xc8, w1
    2010:	01 48 78    	mov.b     w1, [w0]
    2012:	01 00 37    	bra       0x2016 <.L22>

00002014 <.L28>:
    2014:	00 00 00    	nop       

00002016 <.L22>:
    2016:	0c c8 bf    	mov.b     0x80c, WREG
    2018:	00 80 fb    	ze        w0, w0
    201a:	61 00 60    	and.w     w0, #0x1, w0
    201c:	00 40 78    	mov.b     w0, w0
    201e:	00 04 e0    	cp0.b     w0
    2020:	09 00 32    	bra       Z, 0x2034 <.L14>
    2022:	00 a0 20    	mov.w     #0xa00, w0
    2024:	01 c4 b3    	mov.b     #0x40, w1
    2026:	01 48 78    	mov.b     w1, [w0]
    2028:	50 a0 20    	mov.w     #0xa05, w0
    202a:	41 c8 b3    	mov.b     #0x84, w1
    202c:	01 48 78    	mov.b     w1, [w0]
    202e:	10 a0 20    	mov.w     #0xa01, w0
    2030:	41 c8 b3    	mov.b     #0x84, w1
    2032:	01 48 78    	mov.b     w1, [w0]

00002034 <.L14>:
    2034:	8e c0 a9    	bclr.b    0x8e, #0x6
    2036:	00 80 fa    	ulnk      
    2038:	00 00 06    	return    

0000203a <_usb_process_setup_token>:
    203a:	02 00 fa    	lnk       #0x2
    203c:	11 40 80    	mov.w     0x802, w1
    203e:	01 0f 78    	mov.w     w1, [w14]
    2040:	1e 00 78    	mov.w     [w14], w0
    2042:	90 40 78    	mov.b     [w0], w1
    2044:	40 80 20    	mov.w     #0x804, w0
    2046:	01 48 78    	mov.b     w1, [w0]
    2048:	1e 0f e8    	inc.w     [w14], [w14]
    204a:	1e 00 78    	mov.w     [w14], w0
    204c:	90 40 78    	mov.b     [w0], w1
    204e:	40 80 20    	mov.w     #0x804, w0
    2050:	11 40 98    	mov.b     w1, [w0+1]
    2052:	1e 0f e8    	inc.w     [w14], [w14]
    2054:	1e 00 78    	mov.w     [w14], w0
    2056:	90 40 78    	mov.b     [w0], w1
    2058:	40 80 20    	mov.w     #0x804, w0
    205a:	21 40 98    	mov.b     w1, [w0+2]
    205c:	1e 0f e8    	inc.w     [w14], [w14]
    205e:	1e 00 78    	mov.w     [w14], w0
    2060:	90 40 78    	mov.b     [w0], w1
    2062:	40 80 20    	mov.w     #0x804, w0
    2064:	31 40 98    	mov.b     w1, [w0+3]
    2066:	1e 0f e8    	inc.w     [w14], [w14]
    2068:	1e 00 78    	mov.w     [w14], w0
    206a:	90 40 78    	mov.b     [w0], w1
    206c:	40 80 20    	mov.w     #0x804, w0
    206e:	41 40 98    	mov.b     w1, [w0+4]
    2070:	1e 0f e8    	inc.w     [w14], [w14]
    2072:	1e 00 78    	mov.w     [w14], w0
    2074:	90 40 78    	mov.b     [w0], w1
    2076:	40 80 20    	mov.w     #0x804, w0
    2078:	51 40 98    	mov.b     w1, [w0+5]
    207a:	1e 0f e8    	inc.w     [w14], [w14]
    207c:	1e 00 78    	mov.w     [w14], w0
    207e:	90 40 78    	mov.b     [w0], w1
    2080:	40 80 20    	mov.w     #0x804, w0
    2082:	61 40 98    	mov.b     w1, [w0+6]
    2084:	1e 0f e8    	inc.w     [w14], [w14]
    2086:	1e 00 78    	mov.w     [w14], w0
    2088:	90 40 78    	mov.b     [w0], w1
    208a:	40 80 20    	mov.w     #0x804, w0
    208c:	71 40 98    	mov.b     w1, [w0+7]
    208e:	1e 0f e8    	inc.w     [w14], [w14]
    2090:	00 a0 20    	mov.w     #0xa00, w0
    2092:	01 c4 b3    	mov.b     #0x40, w1
    2094:	01 48 78    	mov.b     w1, [w0]
    2096:	50 a0 20    	mov.w     #0xa05, w0
    2098:	81 c0 b3    	mov.b     #0x8, w1
    209a:	01 48 78    	mov.b     w1, [w0]
    209c:	40 80 20    	mov.w     #0x804, w0
    209e:	10 40 78    	mov.b     [w0], w0
    20a0:	00 04 e0    	cp0.b     w0
    20a2:	06 00 35    	bra       LT, 0x20b0 <.L30>
    20a4:	40 80 20    	mov.w     #0x804, w0
    20a6:	30 00 90    	mov.w     [w0+6], w0
    20a8:	00 00 e0    	cp0.w     w0
    20aa:	02 00 32    	bra       Z, 0x20b0 <.L30>
    20ac:	80 cc b3    	mov.b     #0xc8, w0
    20ae:	01 00 37    	bra       0x20b2 <.L31>

000020b0 <.L30>:
    20b0:	80 c8 b3    	mov.b     #0x88, w0

000020b2 <.L31>:
    20b2:	11 a0 20    	mov.w     #0xa01, w1
    20b4:	80 48 78    	mov.b     w0, [w1]
    20b6:	94 a4 a9    	bclr.b    0x494, #0x5
    20b8:	40 8a 20    	mov.w     #0x8a4, w0
    20ba:	80 c0 eb    	setm.b    w1
    20bc:	01 48 78    	mov.b     w1, [w0]
    20be:	50 8a 20    	mov.w     #0x8a5, w0
    20c0:	80 c0 eb    	setm.b    w1
    20c2:	01 48 78    	mov.b     w1, [w0]
    20c4:	00 00 eb    	clr.w     w0
    20c6:	70 45 88    	mov.w     w0, 0x8ae
    20c8:	00 00 eb    	clr.w     w0
    20ca:	80 45 88    	mov.w     w0, 0x8b0
    20cc:	40 80 20    	mov.w     #0x804, w0
    20ce:	10 40 78    	mov.b     [w0], w0
    20d0:	80 80 fb    	ze        w0, w1
    20d2:	00 06 20    	mov.w     #0x60, w0
    20d4:	00 80 60    	and.w     w1, w0, w0
    20d6:	01 02 20    	mov.w     #0x20, w1
    20d8:	81 0f 50    	sub.w     w0, w1, [w15]
    20da:	11 00 32    	bra       Z, 0x20fe <.L34>
    20dc:	01 04 20    	mov.w     #0x40, w1
    20de:	81 0f 50    	sub.w     w0, w1, [w15]
    20e0:	04 00 32    	bra       Z, 0x20ea <.L35>
    20e2:	00 00 e0    	cp0.w     w0
    20e4:	16 00 3a    	bra       NZ, 0x2112 <.L41>
    20e6:	1a 00 07    	rcall     0x211c <_usb_standard_requests> <.LFB6> <.LFE5>
    20e8:	17 00 37    	bra       0x2118 <.L29>

000020ea <.L35>:
    20ea:	c0 40 80    	mov.w     0x818, w0
    20ec:	00 00 e0    	cp0.w     w0
    20ee:	03 00 32    	bra       Z, 0x20f6 <.L37>
    20f0:	c0 40 80    	mov.w     0x818, w0
    20f2:	00 00 01    	call      w0
    20f4:	11 00 37    	bra       0x2118 <.L29>

000020f6 <.L37>:
    20f6:	0c c8 bf    	mov.b     0x80c, WREG
    20f8:	00 04 a0    	bset.b    w0, #0x0
    20fa:	0c e8 b7    	mov.b     WREG, 0x80c
    20fc:	0d 00 37    	bra       0x2118 <.L29>

000020fe <.L34>:
    20fe:	b0 40 80    	mov.w     0x816, w0
    2100:	00 00 e0    	cp0.w     w0
    2102:	03 00 32    	bra       Z, 0x210a <.L39>
    2104:	b0 40 80    	mov.w     0x816, w0
    2106:	00 00 01    	call      w0
    2108:	07 00 37    	bra       0x2118 <.L29>

0000210a <.L39>:
    210a:	0c c8 bf    	mov.b     0x80c, WREG
    210c:	00 04 a0    	bset.b    w0, #0x0
    210e:	0c e8 b7    	mov.b     WREG, 0x80c
    2110:	03 00 37    	bra       0x2118 <.L29>

00002112 <.L41>:
    2112:	0c c8 bf    	mov.b     0x80c, WREG
    2114:	00 04 a0    	bset.b    w0, #0x0
    2116:	0c e8 b7    	mov.b     WREG, 0x80c

00002118 <.L29>:
    2118:	00 80 fa    	ulnk      
    211a:	00 00 06    	return    

0000211c <_usb_standard_requests>:
    211c:	06 00 fa    	lnk       #0x6
    211e:	40 80 20    	mov.w     #0x804, w0
    2120:	10 40 90    	mov.b     [w0+1], w0
    2122:	00 80 fb    	ze        w0, w0
    2124:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2126:	ba 01 32    	bra       Z, 0x249c <.L47>
    2128:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    212a:	0c 00 3c    	bra       GT, 0x2144 <.L52>
    212c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    212e:	c1 00 32    	bra       Z, 0x22b2 <.L45>
    2130:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2132:	03 00 3c    	bra       GT, 0x213a <.L53>
    2134:	00 00 e0    	cp0.w     w0
    2136:	12 00 32    	bra       Z, 0x215c <.L44>
    2138:	85 02 37    	bra       0x2644 <.L43>

0000213a <.L53>:
    213a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    213c:	ba 00 32    	bra       Z, 0x22b2 <.L45>
    213e:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2140:	8b 01 32    	bra       Z, 0x2458 <.L46>
    2142:	80 02 37    	bra       0x2644 <.L43>

00002144 <.L52>:
    2144:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    2146:	20 02 32    	bra       Z, 0x2588 <.L49>
    2148:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    214a:	03 00 3c    	bra       GT, 0x2152 <.L54>
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    214c:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    214e:	11 02 32    	bra       Z, 0x2572 <.L48>
    2150:	79 02 37    	bra       0x2644 <.L43>

00002152 <.L54>:
    2152:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    2154:	3b 02 32    	bra       Z, 0x25cc <.L50>
    2156:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    2158:	54 02 32    	bra       Z, 0x2602 <.L51>
    215a:	74 02 37    	bra       0x2644 <.L43>

0000215c <.L44>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    215c:	40 80 20    	mov.w     #0x804, w0
    215e:	10 40 78    	mov.b     [w0], w0
    2160:	00 80 fb    	ze        w0, w0
    2162:	7f 00 60    	and.w     w0, #0x1f, w0
    2164:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2166:	13 00 32    	bra       Z, 0x218e <.L57>
    2168:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    216a:	32 00 32    	bra       Z, 0x21d0 <.L58>
    216c:	00 00 e0    	cp0.w     w0
    216e:	9c 00 3a    	bra       NZ, 0x22a8 <.L134>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    2170:	30 50 80    	mov.w     0xa06, w0
    2172:	e1 80 20    	mov.w     #0x80e, w1
    2174:	91 40 78    	mov.b     [w1], w1
    2176:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    2178:	30 50 80    	mov.w     0xa06, w0
    217a:	00 00 e8    	inc.w     w0, w0
    217c:	80 40 eb    	clr.b     w1
    217e:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    2180:	40 a0 20    	mov.w     #0xa04, w0
    2182:	21 c0 b3    	mov.b     #0x2, w1
    2184:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2186:	50 a0 20    	mov.w     #0xa05, w0
    2188:	81 cc b3    	mov.b     #0xc8, w1
    218a:	01 48 78    	mov.b     w1, [w0]
                    break;
    218c:	91 00 37    	bra       0x22b0 <.L59>

0000218e <.L57>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    218e:	10 c8 bf    	mov.b     0x810, WREG
    2190:	00 80 fb    	ze        w0, w0
    2192:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2194:	03 00 32    	bra       Z, 0x219c <.L61>
    2196:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2198:	05 00 32    	bra       Z, 0x21a4 <.L62>
    219a:	19 00 37    	bra       0x21ce <.L60>

0000219c <.L61>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    219c:	0c c8 bf    	mov.b     0x80c, WREG
    219e:	00 04 a0    	bset.b    w0, #0x0
    21a0:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    21a2:	15 00 37    	bra       0x21ce <.L60>

000021a4 <.L62>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    21a4:	40 80 20    	mov.w     #0x804, w0
    21a6:	40 40 90    	mov.b     [w0+4], w0
    21a8:	00 04 e0    	cp0.b     w0
    21aa:	0e 00 3a    	bra       NZ, 0x21c8 <.L63>
                                BD[EP0IN].address[0] = 0;
    21ac:	30 50 80    	mov.w     0xa06, w0
    21ae:	80 40 eb    	clr.b     w1
    21b0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    21b2:	30 50 80    	mov.w     0xa06, w0
    21b4:	00 00 e8    	inc.w     w0, w0
    21b6:	80 40 eb    	clr.b     w1
    21b8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    21ba:	40 a0 20    	mov.w     #0xa04, w0
    21bc:	21 c0 b3    	mov.b     #0x2, w1
    21be:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    21c0:	50 a0 20    	mov.w     #0xa05, w0
    21c2:	81 cc b3    	mov.b     #0xc8, w1
    21c4:	01 48 78    	mov.b     w1, [w0]
    21c6:	03 00 37    	bra       0x21ce <.L60>

000021c8 <.L63>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    21c8:	0c c8 bf    	mov.b     0x80c, WREG
    21ca:	00 04 a0    	bset.b    w0, #0x0
    21cc:	0c e8 b7    	mov.b     WREG, 0x80c

000021ce <.L60>:
                            }
                    }
                    break;
    21ce:	70 00 37    	bra       0x22b0 <.L59>

000021d0 <.L58>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    21d0:	10 c8 bf    	mov.b     0x810, WREG
    21d2:	00 80 fb    	ze        w0, w0
    21d4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    21d6:	03 00 32    	bra       Z, 0x21de <.L65>
    21d8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    21da:	29 00 32    	bra       Z, 0x222e <.L66>
    21dc:	61 00 37    	bra       0x22a0 <.L135>

000021de <.L65>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    21de:	40 80 20    	mov.w     #0x804, w0
    21e0:	40 40 90    	mov.b     [w0+4], w0
    21e2:	00 80 fb    	ze        w0, w0
    21e4:	6f 00 60    	and.w     w0, #0xf, w0
    21e6:	00 00 e0    	cp0.w     w0
    21e8:	1e 00 3a    	bra       NZ, 0x2226 <.L67>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    21ea:	31 50 80    	mov.w     0xa06, w1
    21ec:	40 80 20    	mov.w     #0x804, w0
    21ee:	40 40 90    	mov.b     [w0+4], w0
    21f0:	00 04 e0    	cp0.b     w0
    21f2:	07 00 3d    	bra       GE, 0x2202 <.L68>
    21f4:	50 a0 20    	mov.w     #0xa05, w0
    21f6:	10 40 78    	mov.b     [w0], w0
    21f8:	00 80 fb    	ze        w0, w0
    21fa:	64 00 60    	and.w     w0, #0x4, w0
    21fc:	42 80 de    	asr.w     w0, #0x2, w0
    21fe:	00 40 78    	mov.b     w0, w0
    2200:	06 00 37    	bra       0x220e <.L69>

00002202 <.L68>:
    2202:	10 a0 20    	mov.w     #0xa01, w0
    2204:	10 40 78    	mov.b     [w0], w0
    2206:	00 80 fb    	ze        w0, w0
    2208:	64 00 60    	and.w     w0, #0x4, w0
    220a:	42 80 de    	asr.w     w0, #0x2, w0
    220c:	00 40 78    	mov.b     w0, w0

0000220e <.L69>:
    220e:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    2210:	30 50 80    	mov.w     0xa06, w0
    2212:	00 00 e8    	inc.w     w0, w0
    2214:	80 40 eb    	clr.b     w1
    2216:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    2218:	40 a0 20    	mov.w     #0xa04, w0
    221a:	21 c0 b3    	mov.b     #0x2, w1
    221c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    221e:	50 a0 20    	mov.w     #0xa05, w0
    2220:	81 cc b3    	mov.b     #0xc8, w1
    2222:	01 48 78    	mov.b     w1, [w0]
    2224:	03 00 37    	bra       0x222c <.L70>

00002226 <.L67>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    2226:	0c c8 bf    	mov.b     0x80c, WREG
    2228:	00 04 a0    	bset.b    w0, #0x0
    222a:	0c e8 b7    	mov.b     WREG, 0x80c

0000222c <.L70>:
                            }
                            break;
    222c:	3c 00 37    	bra       0x22a6 <.L71>

0000222e <.L66>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    222e:	a0 4a 20    	mov.w     #0x4aa, w0
    2230:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    2232:	40 80 20    	mov.w     #0x804, w0
    2234:	40 40 90    	mov.b     [w0+4], w0
    2236:	6f 40 60    	and.b     w0, #0xf, w0
    2238:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    223a:	2e 40 90    	mov.b     [w14+2], w0
    223c:	00 80 fb    	ze        w0, w0
    223e:	00 00 40    	add.w     w0, w0, w0
    2240:	80 00 78    	mov.w     w0, w1
    2242:	40 80 20    	mov.w     #0x804, w0
    2244:	40 40 90    	mov.b     [w0+4], w0
    2246:	00 00 fb    	se        w0, w0
    2248:	4f 00 de    	lsr.w     w0, #0xf, w0
    224a:	01 00 70    	ior.w     w0, w1, w0
    224c:	c2 00 dd    	sl.w      w0, #0x2, w1
    224e:	00 a0 20    	mov.w     #0xa00, w0
    2250:	00 80 40    	add.w     w1, w0, w0
    2252:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    2254:	2e 40 90    	mov.b     [w14+2], w0
    2256:	00 80 fb    	ze        w0, w0
    2258:	00 00 40    	add.w     w0, w0, w0
    225a:	1e 00 40    	add.w     w0, [w14], w0
    225c:	90 00 78    	mov.w     [w0], w1
    225e:	40 80 20    	mov.w     #0x804, w0
    2260:	40 40 90    	mov.b     [w0+4], w0
    2262:	00 04 e0    	cp0.b     w0
    2264:	02 00 3d    	bra       GE, 0x226a <.L72>
    2266:	40 00 20    	mov.w     #0x4, w0
    2268:	01 00 37    	bra       0x226c <.L73>

0000226a <.L72>:
    226a:	80 00 20    	mov.w     #0x8, w0

0000226c <.L73>:
    226c:	00 80 60    	and.w     w1, w0, w0
    226e:	00 00 e0    	cp0.w     w0
    2270:	13 00 32    	bra       Z, 0x2298 <.L74>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    2272:	30 50 80    	mov.w     0xa06, w0
    2274:	ae 00 90    	mov.w     [w14+4], w1
    2276:	91 40 90    	mov.b     [w1+1], w1
    2278:	81 80 fb    	ze        w1, w1
    227a:	e4 80 60    	and.w     w1, #0x4, w1
    227c:	c2 88 de    	asr.w     w1, #0x2, w1
    227e:	81 40 78    	mov.b     w1, w1
    2280:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    2282:	30 50 80    	mov.w     0xa06, w0
    2284:	00 00 e8    	inc.w     w0, w0
    2286:	80 40 eb    	clr.b     w1
    2288:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    228a:	40 a0 20    	mov.w     #0xa04, w0
    228c:	21 c0 b3    	mov.b     #0x2, w1
    228e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2290:	50 a0 20    	mov.w     #0xa05, w0
    2292:	81 cc b3    	mov.b     #0xc8, w1
    2294:	01 48 78    	mov.b     w1, [w0]
    2296:	03 00 37    	bra       0x229e <.L75>

00002298 <.L74>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    2298:	0c c8 bf    	mov.b     0x80c, WREG
    229a:	00 04 a0    	bset.b    w0, #0x0
    229c:	0c e8 b7    	mov.b     WREG, 0x80c

0000229e <.L75>:
                            }
                            break;
    229e:	03 00 37    	bra       0x22a6 <.L71>

000022a0 <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    22a0:	0c c8 bf    	mov.b     0x80c, WREG
    22a2:	00 04 a0    	bset.b    w0, #0x0
    22a4:	0c e8 b7    	mov.b     WREG, 0x80c

000022a6 <.L71>:
                    }
                    break;
    22a6:	04 00 37    	bra       0x22b0 <.L59>

000022a8 <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    22a8:	0c c8 bf    	mov.b     0x80c, WREG
    22aa:	00 04 a0    	bset.b    w0, #0x0
    22ac:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    22ae:	cf 01 37    	bra       0x264e <.L42>

000022b0 <.L59>:
    22b0:	ce 01 37    	bra       0x264e <.L42>

000022b2 <.L45>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    22b2:	40 80 20    	mov.w     #0x804, w0
    22b4:	10 40 78    	mov.b     [w0], w0
    22b6:	00 80 fb    	ze        w0, w0
    22b8:	7f 00 60    	and.w     w0, #0x1f, w0
    22ba:	00 00 e0    	cp0.w     w0
    22bc:	03 00 32    	bra       Z, 0x22c4 <.L78>
    22be:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    22c0:	1c 00 32    	bra       Z, 0x22fa <.L79>
    22c2:	c5 00 37    	bra       0x244e <.L136>

000022c4 <.L78>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    22c4:	40 80 20    	mov.w     #0x804, w0
    22c6:	20 40 90    	mov.b     [w0+2], w0
    22c8:	00 80 fb    	ze        w0, w0
    22ca:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22cc:	12 00 3a    	bra       NZ, 0x22f2 <.L137>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    22ce:	40 80 20    	mov.w     #0x804, w0
    22d0:	10 40 90    	mov.b     [w0+1], w0
    22d2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22d4:	04 00 3a    	bra       NZ, 0x22de <.L82>
                                USB_device_status &= 0xFE;
    22d6:	0e c8 bf    	mov.b     0x80e, WREG
    22d8:	00 04 a1    	bclr.b    w0, #0x0
    22da:	0e e8 b7    	mov.b     WREG, 0x80e
    22dc:	03 00 37    	bra       0x22e4 <.L83>

000022de <.L82>:
                            else
                                USB_device_status |= 0x01;
    22de:	0e c8 bf    	mov.b     0x80e, WREG
    22e0:	00 04 a0    	bset.b    w0, #0x0
    22e2:	0e e8 b7    	mov.b     WREG, 0x80e

000022e4 <.L83>:
                            BD[EP0IN].bytecount = 0;
    22e4:	40 a0 20    	mov.w     #0xa04, w0
    22e6:	80 40 eb    	clr.b     w1
    22e8:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    22ea:	50 a0 20    	mov.w     #0xa05, w0
    22ec:	81 cc b3    	mov.b     #0xc8, w1
    22ee:	01 48 78    	mov.b     w1, [w0]
                            break;
    22f0:	03 00 37    	bra       0x22f8 <.L84>

000022f2 <.L137>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    22f2:	0c c8 bf    	mov.b     0x80c, WREG
    22f4:	00 04 a0    	bset.b    w0, #0x0
    22f6:	0c e8 b7    	mov.b     WREG, 0x80c

000022f8 <.L84>:
                    }
                    break;
    22f8:	ae 00 37    	bra       0x2456 <.L85>

000022fa <.L79>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    22fa:	10 c8 bf    	mov.b     0x810, WREG
    22fc:	00 80 fb    	ze        w0, w0
    22fe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2300:	03 00 32    	bra       Z, 0x2308 <.L87>
    2302:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2304:	12 00 32    	bra       Z, 0x232a <.L88>
    2306:	9f 00 37    	bra       0x2446 <.L138>

00002308 <.L87>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    2308:	40 80 20    	mov.w     #0x804, w0
    230a:	40 40 90    	mov.b     [w0+4], w0
    230c:	00 80 fb    	ze        w0, w0
    230e:	6f 00 60    	and.w     w0, #0xf, w0
    2310:	00 00 e0    	cp0.w     w0
    2312:	07 00 3a    	bra       NZ, 0x2322 <.L89>
                                BD[EP0IN].bytecount = 0;
    2314:	40 a0 20    	mov.w     #0xa04, w0
    2316:	80 40 eb    	clr.b     w1
    2318:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    231a:	50 a0 20    	mov.w     #0xa05, w0
    231c:	81 cc b3    	mov.b     #0xc8, w1
    231e:	01 48 78    	mov.b     w1, [w0]
    2320:	03 00 37    	bra       0x2328 <.L90>

00002322 <.L89>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    2322:	0c c8 bf    	mov.b     0x80c, WREG
    2324:	00 04 a0    	bset.b    w0, #0x0
    2326:	0c e8 b7    	mov.b     WREG, 0x80c

00002328 <.L90>:
                            }
                            break;
    2328:	91 00 37    	bra       0x244c <.L91>

0000232a <.L88>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    232a:	a0 4a 20    	mov.w     #0x4aa, w0
    232c:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    232e:	40 80 20    	mov.w     #0x804, w0
    2330:	40 40 90    	mov.b     [w0+4], w0
    2332:	6f 40 60    	and.b     w0, #0xf, w0
    2334:	20 47 98    	mov.b     w0, [w14+2]
    2336:	2e 40 90    	mov.b     [w14+2], w0
    2338:	00 04 e0    	cp0.b     w0
    233a:	79 00 32    	bra       Z, 0x242e <.L92>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    233c:	2e 40 90    	mov.b     [w14+2], w0
    233e:	00 80 fb    	ze        w0, w0
    2340:	00 00 40    	add.w     w0, w0, w0
    2342:	80 00 78    	mov.w     w0, w1
    2344:	40 80 20    	mov.w     #0x804, w0
    2346:	40 40 90    	mov.b     [w0+4], w0
    2348:	00 00 fb    	se        w0, w0
    234a:	4f 00 de    	lsr.w     w0, #0xf, w0
    234c:	01 00 70    	ior.w     w0, w1, w0
    234e:	c2 00 dd    	sl.w      w0, #0x2, w1
    2350:	00 a0 20    	mov.w     #0xa00, w0
    2352:	00 80 40    	add.w     w1, w0, w0
    2354:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    2356:	40 80 20    	mov.w     #0x804, w0
    2358:	40 40 90    	mov.b     [w0+4], w0
    235a:	00 04 e0    	cp0.b     w0
    235c:	30 00 3d    	bra       GE, 0x23be <.L93>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    235e:	2e 40 90    	mov.b     [w14+2], w0
    2360:	00 80 fb    	ze        w0, w0
    2362:	00 00 40    	add.w     w0, w0, w0
    2364:	1e 00 40    	add.w     w0, [w14], w0
    2366:	10 00 78    	mov.w     [w0], w0
    2368:	64 00 60    	and.w     w0, #0x4, w0
    236a:	00 00 e0    	cp0.w     w0
    236c:	24 00 32    	bra       Z, 0x23b6 <.L94>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    236e:	40 80 20    	mov.w     #0x804, w0
    2370:	10 40 90    	mov.b     [w0+1], w0
    2372:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2374:	19 00 3a    	bra       NZ, 0x23a8 <.L95>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    2376:	2e 40 90    	mov.b     [w14+2], w0
    2378:	00 80 fb    	ze        w0, w0
    237a:	00 00 40    	add.w     w0, w0, w0
    237c:	9e 00 40    	add.w     w0, [w14], w1
    237e:	2e 40 90    	mov.b     [w14+2], w0
    2380:	00 80 fb    	ze        w0, w0
    2382:	00 00 40    	add.w     w0, w0, w0
    2384:	1e 00 40    	add.w     w0, [w14], w0
    2386:	10 01 78    	mov.w     [w0], w2
    2388:	d0 0f 20    	mov.w     #0xfd, w0
    238a:	00 00 61    	and.w     w2, w0, w0
    238c:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    238e:	2e 00 90    	mov.w     [w14+4], w0
    2390:	10 40 90    	mov.b     [w0+1], w0
    2392:	80 40 78    	mov.b     w0, w1
    2394:	01 24 a1    	bclr.b    w1, #0x2
    2396:	2e 00 90    	mov.w     [w14+4], w0
    2398:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status |= DTS;
    239a:	2e 00 90    	mov.w     [w14+4], w0
    239c:	10 40 90    	mov.b     [w0+1], w0
    239e:	80 40 78    	mov.b     w0, w1
    23a0:	01 64 a0    	bset.b    w1, #0x6
    23a2:	2e 00 90    	mov.w     [w14+4], w0
    23a4:	11 40 98    	mov.b     w1, [w0+1]
    23a6:	43 00 37    	bra       0x242e <.L92>

000023a8 <.L95>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    23a8:	2e 00 90    	mov.w     [w14+4], w0
    23aa:	10 40 90    	mov.b     [w0+1], w0
    23ac:	80 40 78    	mov.b     w0, w1
    23ae:	01 24 a0    	bset.b    w1, #0x2
    23b0:	2e 00 90    	mov.w     [w14+4], w0
    23b2:	11 40 98    	mov.b     w1, [w0+1]
    23b4:	3c 00 37    	bra       0x242e <.L92>

000023b6 <.L94>:
                                        }
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    23b6:	0c c8 bf    	mov.b     0x80c, WREG
    23b8:	00 04 a0    	bset.b    w0, #0x0
    23ba:	0c e8 b7    	mov.b     WREG, 0x80c
    23bc:	38 00 37    	bra       0x242e <.L92>

000023be <.L93>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    23be:	2e 40 90    	mov.b     [w14+2], w0
    23c0:	00 80 fb    	ze        w0, w0
    23c2:	00 00 40    	add.w     w0, w0, w0
    23c4:	1e 00 40    	add.w     w0, [w14], w0
    23c6:	10 00 78    	mov.w     [w0], w0
    23c8:	68 00 60    	and.w     w0, #0x8, w0
    23ca:	00 00 e0    	cp0.w     w0
    23cc:	2d 00 32    	bra       Z, 0x2428 <.L96>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    23ce:	40 80 20    	mov.w     #0x804, w0
    23d0:	10 40 90    	mov.b     [w0+1], w0
    23d2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    23d4:	19 00 3a    	bra       NZ, 0x2408 <.L97>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    23d6:	2e 40 90    	mov.b     [w14+2], w0
    23d8:	00 80 fb    	ze        w0, w0
    23da:	00 00 40    	add.w     w0, w0, w0
    23dc:	9e 00 40    	add.w     w0, [w14], w1
    23de:	2e 40 90    	mov.b     [w14+2], w0
    23e0:	00 80 fb    	ze        w0, w0
    23e2:	00 00 40    	add.w     w0, w0, w0
    23e4:	1e 00 40    	add.w     w0, [w14], w0
    23e6:	10 01 78    	mov.w     [w0], w2
    23e8:	d0 0f 20    	mov.w     #0xfd, w0
    23ea:	00 00 61    	and.w     w2, w0, w0
    23ec:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    23ee:	2e 00 90    	mov.w     [w14+4], w0
    23f0:	10 40 90    	mov.b     [w0+1], w0
    23f2:	80 40 78    	mov.b     w0, w1
    23f4:	01 24 a1    	bclr.b    w1, #0x2
    23f6:	2e 00 90    	mov.w     [w14+4], w0
    23f8:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status &= ~DTS;
    23fa:	2e 00 90    	mov.w     [w14+4], w0
    23fc:	10 40 90    	mov.b     [w0+1], w0
    23fe:	80 40 78    	mov.b     w0, w1
    2400:	01 64 a1    	bclr.b    w1, #0x6
    2402:	2e 00 90    	mov.w     [w14+4], w0
    2404:	11 40 98    	mov.b     w1, [w0+1]
    2406:	06 00 37    	bra       0x2414 <.L98>

00002408 <.L97>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    2408:	2e 00 90    	mov.w     [w14+4], w0
    240a:	10 40 90    	mov.b     [w0+1], w0
    240c:	80 40 78    	mov.b     w0, w1
    240e:	01 24 a0    	bset.b    w1, #0x2
    2410:	2e 00 90    	mov.w     [w14+4], w0
    2412:	11 40 98    	mov.b     w1, [w0+1]

00002414 <.L98>:
                                        }
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    2414:	40 80 20    	mov.w     #0x804, w0
    2416:	10 40 90    	mov.b     [w0+1], w0
    2418:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    241a:	02 00 3a    	bra       NZ, 0x2420 <.L99>
    241c:	80 c8 b3    	mov.b     #0x88, w0
    241e:	01 00 37    	bra       0x2422 <.L100>

00002420 <.L99>:
    2420:	40 c8 b3    	mov.b     #0x84, w0

00002422 <.L100>:
    2422:	ae 00 90    	mov.w     [w14+4], w1
    2424:	90 40 98    	mov.b     w0, [w1+1]
    2426:	03 00 37    	bra       0x242e <.L92>

00002428 <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    2428:	0c c8 bf    	mov.b     0x80c, WREG
    242a:	00 04 a0    	bset.b    w0, #0x0
    242c:	0c e8 b7    	mov.b     WREG, 0x80c

0000242e <.L92>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    242e:	0c c8 bf    	mov.b     0x80c, WREG
    2430:	00 80 fb    	ze        w0, w0
    2432:	61 00 60    	and.w     w0, #0x1, w0
    2434:	00 00 e0    	cp0.w     w0
    2436:	06 00 3a    	bra       NZ, 0x2444 <.L101>
                                BD[EP0IN].bytecount = 0;
    2438:	40 a0 20    	mov.w     #0xa04, w0
    243a:	80 40 eb    	clr.b     w1
    243c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    243e:	50 a0 20    	mov.w     #0xa05, w0
    2440:	81 cc b3    	mov.b     #0xc8, w1
    2442:	01 48 78    	mov.b     w1, [w0]

00002444 <.L101>:
                            }
                            break;
    2444:	03 00 37    	bra       0x244c <.L91>

00002446 <.L138>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    2446:	0c c8 bf    	mov.b     0x80c, WREG
    2448:	00 04 a0    	bset.b    w0, #0x0
    244a:	0c e8 b7    	mov.b     WREG, 0x80c

0000244c <.L91>:
                    }
                    break;
    244c:	04 00 37    	bra       0x2456 <.L85>

0000244e <.L136>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    244e:	0c c8 bf    	mov.b     0x80c, WREG
    2450:	00 04 a0    	bset.b    w0, #0x0
    2452:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    2454:	fc 00 37    	bra       0x264e <.L42>

00002456 <.L85>:
    2456:	fb 00 37    	bra       0x264e <.L42>

00002458 <.L46>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    2458:	40 80 20    	mov.w     #0x804, w0
    245a:	20 40 90    	mov.b     [w0+2], w0
    245c:	00 04 e0    	cp0.b     w0
    245e:	04 00 3d    	bra       GE, 0x2468 <.L102>
                USB_error_flags |= REQUEST_ERROR;
    2460:	0c c8 bf    	mov.b     0x80c, WREG
    2462:	00 04 a0    	bset.b    w0, #0x0
    2464:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    2466:	f3 00 37    	bra       0x264e <.L42>

00002468 <.L102>:
    2468:	40 80 20    	mov.w     #0x804, w0
    246a:	90 40 78    	mov.b     [w0], w1
    246c:	40 8a 20    	mov.w     #0x8a4, w0
    246e:	01 48 78    	mov.b     w1, [w0]
    2470:	40 80 20    	mov.w     #0x804, w0
    2472:	90 40 90    	mov.b     [w0+1], w1
    2474:	50 8a 20    	mov.w     #0x8a5, w0
    2476:	01 48 78    	mov.b     w1, [w0]
    2478:	40 80 20    	mov.w     #0x804, w0
    247a:	10 00 90    	mov.w     [w0+2], w0
    247c:	30 45 88    	mov.w     w0, 0x8a6
    247e:	40 80 20    	mov.w     #0x804, w0
    2480:	20 00 90    	mov.w     [w0+4], w0
    2482:	40 45 88    	mov.w     w0, 0x8a8
    2484:	40 80 20    	mov.w     #0x804, w0
    2486:	30 00 90    	mov.w     [w0+6], w0
    2488:	50 45 88    	mov.w     w0, 0x8aa
    248a:	00 e1 21    	mov.w     #0x1e10, w0
    248c:	90 45 88    	mov.w     w0, 0x8b2
    248e:	40 a0 20    	mov.w     #0xa04, w0
    2490:	80 40 eb    	clr.b     w1
    2492:	01 48 78    	mov.b     w1, [w0]
    2494:	50 a0 20    	mov.w     #0xa05, w0
    2496:	81 cc b3    	mov.b     #0xc8, w1
    2498:	01 48 78    	mov.b     w1, [w0]
    249a:	d9 00 37    	bra       0x264e <.L42>

0000249c <.L47>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    249c:	40 80 20    	mov.w     #0x804, w0
    249e:	90 40 78    	mov.b     [w0], w1
    24a0:	40 8a 20    	mov.w     #0x8a4, w0
    24a2:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    24a4:	40 80 20    	mov.w     #0x804, w0
    24a6:	90 40 90    	mov.b     [w0+1], w1
    24a8:	50 8a 20    	mov.w     #0x8a5, w0
    24aa:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    24ac:	40 80 20    	mov.w     #0x804, w0
    24ae:	10 00 90    	mov.w     [w0+2], w0
    24b0:	30 45 88    	mov.w     w0, 0x8a6
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    24b2:	40 80 20    	mov.w     #0x804, w0
    24b4:	20 00 90    	mov.w     [w0+4], w0
    24b6:	40 45 88    	mov.w     w0, 0x8a8
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    24b8:	40 80 20    	mov.w     #0x804, w0
    24ba:	30 00 90    	mov.w     [w0+6], w0
    24bc:	50 45 88    	mov.w     w0, 0x8aa
            switch (USB_setup.wValue.b[1]) {
    24be:	40 80 20    	mov.w     #0x804, w0
    24c0:	30 40 90    	mov.b     [w0+3], w0
    24c2:	00 80 fb    	ze        w0, w0
    24c4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    24c6:	0b 00 32    	bra       Z, 0x24de <.L106>
    24c8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    24ca:	24 00 32    	bra       Z, 0x2514 <.L107>
    24cc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    24ce:	37 00 3a    	bra       NZ, 0x253e <.L139>
                case DEVICE:
                    USB_request.data_ptr = Device;
    24d0:	e0 21 29    	mov.w     #0x921e, w0
    24d2:	60 45 88    	mov.w     w0, 0x8ac
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    24d4:	60 45 80    	mov.w     0x8ac, w0
    24d6:	10 40 78    	mov.b     [w0], w0
    24d8:	00 80 fb    	ze        w0, w0
    24da:	70 45 88    	mov.w     w0, 0x8ae
                    break;
    24dc:	39 00 37    	bra       0x2550 <.L108>

000024de <.L106>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    24de:	40 80 20    	mov.w     #0x804, w0
    24e0:	20 40 90    	mov.b     [w0+2], w0
    24e2:	00 04 e0    	cp0.b     w0
    24e4:	13 00 3a    	bra       NZ, 0x250c <.L109>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    24e6:	40 80 20    	mov.w     #0x804, w0
    24e8:	20 40 90    	mov.b     [w0+2], w0
    24ea:	00 80 fb    	ze        w0, w0
    24ec:	80 00 40    	add.w     w0, w0, w1
    24ee:	20 24 29    	mov.w     #0x9242, w0
    24f0:	00 80 40    	add.w     w1, w0, w0
    24f2:	10 00 78    	mov.w     [w0], w0
    24f4:	60 45 88    	mov.w     w0, 0x8ac
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    24f6:	60 45 80    	mov.w     0x8ac, w0
    24f8:	00 80 e8    	inc2.w    w0, w0
    24fa:	90 40 78    	mov.b     [w0], w1
    24fc:	e0 8a 20    	mov.w     #0x8ae, w0
    24fe:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    2500:	60 45 80    	mov.w     0x8ac, w0
    2502:	63 00 40    	add.w     w0, #0x3, w0
    2504:	90 40 78    	mov.b     [w0], w1
    2506:	f0 8a 20    	mov.w     #0x8af, w0
    2508:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    250a:	22 00 37    	bra       0x2550 <.L108>

0000250c <.L109>:
    250c:	0c c8 bf    	mov.b     0x80c, WREG
    250e:	00 04 a0    	bset.b    w0, #0x0
    2510:	0c e8 b7    	mov.b     WREG, 0x80c
    2512:	1e 00 37    	bra       0x2550 <.L108>

00002514 <.L107>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    2514:	40 80 20    	mov.w     #0x804, w0
    2516:	20 40 90    	mov.b     [w0+2], w0
    2518:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    251a:	0d 00 3e    	bra       GTU, 0x2536 <.L111>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    251c:	40 80 20    	mov.w     #0x804, w0
    251e:	20 40 90    	mov.b     [w0+2], w0
    2520:	00 80 fb    	ze        w0, w0
    2522:	80 00 40    	add.w     w0, w0, w1
    2524:	20 28 29    	mov.w     #0x9282, w0
    2526:	00 80 40    	add.w     w1, w0, w0
    2528:	10 00 78    	mov.w     [w0], w0
    252a:	60 45 88    	mov.w     w0, 0x8ac
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    252c:	60 45 80    	mov.w     0x8ac, w0
    252e:	10 40 78    	mov.b     [w0], w0
    2530:	00 80 fb    	ze        w0, w0
    2532:	70 45 88    	mov.w     w0, 0x8ae
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    2534:	0d 00 37    	bra       0x2550 <.L108>

00002536 <.L111>:
    2536:	0c c8 bf    	mov.b     0x80c, WREG
    2538:	00 04 a0    	bset.b    w0, #0x0
    253a:	0c e8 b7    	mov.b     WREG, 0x80c
    253c:	09 00 37    	bra       0x2550 <.L108>

0000253e <.L139>:
                default:
                    if (USB_get_descriptor_callback)
    253e:	a0 40 80    	mov.w     0x814, w0
    2540:	00 00 e0    	cp0.w     w0
    2542:	03 00 32    	bra       Z, 0x254a <.L113>
                        USB_get_descriptor_callback();
    2544:	a0 40 80    	mov.w     0x814, w0
    2546:	00 00 01    	call      w0
    2548:	03 00 37    	bra       0x2550 <.L108>

0000254a <.L113>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    254a:	0c c8 bf    	mov.b     0x80c, WREG
    254c:	00 04 a0    	bset.b    w0, #0x0
    254e:	0c e8 b7    	mov.b     WREG, 0x80c

00002550 <.L108>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    2550:	0c c8 bf    	mov.b     0x80c, WREG
    2552:	00 80 fb    	ze        w0, w0
    2554:	61 00 60    	and.w     w0, #0x1, w0
    2556:	00 00 e0    	cp0.w     w0
    2558:	79 00 3a    	bra       NZ, 0x264c <.L144>
                USB_in_callbacks[0] = usb_send_data_packet;
    255a:	20 65 22    	mov.w     #0x2652, w0
    255c:	90 45 88    	mov.w     w0, 0x8b2
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    255e:	40 80 20    	mov.w     #0x804, w0
    2560:	b0 00 90    	mov.w     [w0+6], w1
    2562:	70 45 80    	mov.w     0x8ae, w0
    2564:	80 8f 50    	sub.w     w1, w0, [w15]
    2566:	03 00 31    	bra       C, 0x256e <.L115>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    2568:	40 80 20    	mov.w     #0x804, w0
    256a:	30 00 90    	mov.w     [w0+6], w0
    256c:	70 45 88    	mov.w     w0, 0x8ae

0000256e <.L115>:
                usb_send_data_packet();
    256e:	71 00 07    	rcall     0x2652 <_usb_send_data_packet> <.LFB7> <.LFE6>
            }
            break;
    2570:	6e 00 37    	bra       0x264e <.L42>

00002572 <.L48>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    2572:	30 50 80    	mov.w     0xa06, w0
    2574:	d1 80 20    	mov.w     #0x80d, w1
    2576:	91 40 78    	mov.b     [w1], w1
    2578:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    257a:	40 a0 20    	mov.w     #0xa04, w0
    257c:	11 c0 b3    	mov.b     #0x1, w1
    257e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2580:	50 a0 20    	mov.w     #0xa05, w0
    2582:	81 cc b3    	mov.b     #0xc8, w1
    2584:	01 48 78    	mov.b     w1, [w0]
            break;
    2586:	63 00 37    	bra       0x264e <.L42>

00002588 <.L49>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    2588:	40 80 20    	mov.w     #0x804, w0
    258a:	20 40 90    	mov.b     [w0+2], w0
    258c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    258e:	1a 00 3e    	bra       GTU, 0x25c4 <.L116>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    2590:	10 c0 b3    	mov.b     #0x1, w0
    2592:	1f fc 07    	rcall     0x1dd2 <_usb_disable_endpoints> <.L0> <.LFB1> <.LFE4> <.Letext0> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    2594:	40 80 20    	mov.w     #0x804, w0
    2596:	20 40 90    	mov.b     [w0+2], w0
    2598:	0d e8 b7    	mov.b     WREG, 0x80d
    259a:	0d c8 bf    	mov.b     0x80d, WREG
    259c:	00 80 fb    	ze        w0, w0
    259e:	00 00 e0    	cp0.w     w0
    25a0:	03 00 3a    	bra       NZ, 0x25a8 <.L140>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    25a2:	20 c0 b3    	mov.b     #0x2, w0
    25a4:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    25a6:	07 00 37    	bra       0x25b6 <.L119>

000025a8 <.L140>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    25a8:	30 c0 b3    	mov.b     #0x3, w0
    25aa:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    25ac:	90 40 80    	mov.w     0x812, w0
    25ae:	00 00 e0    	cp0.w     w0
    25b0:	02 00 32    	bra       Z, 0x25b6 <.L119>
                            USB_set_config_callback();
    25b2:	90 40 80    	mov.w     0x812, w0
    25b4:	00 00 01    	call      w0

000025b6 <.L119>:
                }
                BD[EP0IN].bytecount = 0;
    25b6:	40 a0 20    	mov.w     #0xa04, w0
    25b8:	80 40 eb    	clr.b     w1
    25ba:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    25bc:	50 a0 20    	mov.w     #0xa05, w0
    25be:	81 cc b3    	mov.b     #0xc8, w1
    25c0:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    25c2:	45 00 37    	bra       0x264e <.L42>

000025c4 <.L116>:
    25c4:	0c c8 bf    	mov.b     0x80c, WREG
    25c6:	00 04 a0    	bset.b    w0, #0x0
    25c8:	0c e8 b7    	mov.b     WREG, 0x80c
    25ca:	41 00 37    	bra       0x264e <.L42>

000025cc <.L50>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    25cc:	10 c8 bf    	mov.b     0x810, WREG
    25ce:	00 80 fb    	ze        w0, w0
    25d0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    25d2:	13 00 3a    	bra       NZ, 0x25fa <.L141>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    25d4:	40 80 20    	mov.w     #0x804, w0
    25d6:	40 40 90    	mov.b     [w0+4], w0
    25d8:	00 04 e0    	cp0.b     w0
    25da:	0a 00 3a    	bra       NZ, 0x25f0 <.L123>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    25dc:	30 50 80    	mov.w     0xa06, w0
    25de:	80 40 eb    	clr.b     w1
    25e0:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    25e2:	40 a0 20    	mov.w     #0xa04, w0
    25e4:	11 c0 b3    	mov.b     #0x1, w1
    25e6:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    25e8:	50 a0 20    	mov.w     #0xa05, w0
    25ea:	81 cc b3    	mov.b     #0xc8, w1
    25ec:	01 48 78    	mov.b     w1, [w0]
    25ee:	03 00 37    	bra       0x25f6 <.L124>

000025f0 <.L123>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    25f0:	0c c8 bf    	mov.b     0x80c, WREG
    25f2:	00 04 a0    	bset.b    w0, #0x0
    25f4:	0c e8 b7    	mov.b     WREG, 0x80c

000025f6 <.L124>:
                    }
                    break;
    25f6:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    25f8:	2a 00 37    	bra       0x264e <.L42>

000025fa <.L141>:
    25fa:	0c c8 bf    	mov.b     0x80c, WREG
    25fc:	00 04 a0    	bset.b    w0, #0x0
    25fe:	0c e8 b7    	mov.b     WREG, 0x80c
    2600:	26 00 37    	bra       0x264e <.L42>

00002602 <.L51>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    2602:	10 c8 bf    	mov.b     0x810, WREG
    2604:	00 80 fb    	ze        w0, w0
    2606:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2608:	19 00 3a    	bra       NZ, 0x263c <.L142>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    260a:	40 80 20    	mov.w     #0x804, w0
    260c:	40 40 90    	mov.b     [w0+4], w0
    260e:	00 04 e0    	cp0.b     w0
    2610:	10 00 3a    	bra       NZ, 0x2632 <.L128>
                        switch (USB_setup.wValue.b[0]) {
    2612:	40 80 20    	mov.w     #0x804, w0
    2614:	20 40 90    	mov.b     [w0+2], w0
    2616:	00 80 fb    	ze        w0, w0
    2618:	00 00 e0    	cp0.w     w0
    261a:	07 00 3a    	bra       NZ, 0x262a <.L143>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    261c:	40 a0 20    	mov.w     #0xa04, w0
    261e:	80 40 eb    	clr.b     w1
    2620:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2622:	50 a0 20    	mov.w     #0xa05, w0
    2624:	81 cc b3    	mov.b     #0xc8, w1
    2626:	01 48 78    	mov.b     w1, [w0]
                                break;
    2628:	07 00 37    	bra       0x2638 <.L132>

0000262a <.L143>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    262a:	0c c8 bf    	mov.b     0x80c, WREG
    262c:	00 04 a0    	bset.b    w0, #0x0
    262e:	0c e8 b7    	mov.b     WREG, 0x80c
    2630:	03 00 37    	bra       0x2638 <.L132>

00002632 <.L128>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    2632:	0c c8 bf    	mov.b     0x80c, WREG
    2634:	00 04 a0    	bset.b    w0, #0x0
    2636:	0c e8 b7    	mov.b     WREG, 0x80c

00002638 <.L132>:
                    }
                    break;
    2638:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    263a:	09 00 37    	bra       0x264e <.L42>

0000263c <.L142>:
    263c:	0c c8 bf    	mov.b     0x80c, WREG
    263e:	00 04 a0    	bset.b    w0, #0x0
    2640:	0c e8 b7    	mov.b     WREG, 0x80c
    2642:	05 00 37    	bra       0x264e <.L42>

00002644 <.L43>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    2644:	0c c8 bf    	mov.b     0x80c, WREG
    2646:	00 04 a0    	bset.b    w0, #0x0
    2648:	0c e8 b7    	mov.b     WREG, 0x80c
    264a:	01 00 37    	bra       0x264e <.L42>

0000264c <.L144>:
    264c:	00 00 00    	nop       

0000264e <.L42>:
    }
}
    264e:	00 80 fa    	ulnk      
    2650:	00 00 06    	return    

00002652 <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    2652:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    2654:	71 45 80    	mov.w     0x8ae, w1
    2656:	f0 03 20    	mov.w     #0x3f, w0
    2658:	80 8f 50    	sub.w     w1, w0, [w15]
    265a:	05 00 3e    	bra       GTU, 0x2666 <.L146>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    265c:	70 45 80    	mov.w     0x8ae, w0
    265e:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    2660:	00 00 eb    	clr.w     w0
    2662:	70 45 88    	mov.w     w0, 0x8ae
    2664:	05 00 37    	bra       0x2670 <.L147>

00002666 <.L146>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    2666:	00 c4 b3    	mov.b     #0x40, w0
    2668:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    266a:	70 45 80    	mov.w     0x8ae, w0
    266c:	00 04 b1    	sub.w     #0x40, w0
    266e:	70 45 88    	mov.w     w0, 0x8ae

00002670 <.L147>:
    }
    for (i = 0; i < packet_length; i++) {
    2670:	00 40 eb    	clr.b     w0
    2672:	10 47 98    	mov.b     w0, [w14+1]
    2674:	0c 00 37    	bra       0x268e <.L148>

00002676 <.L149>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    2676:	31 50 80    	mov.w     0xa06, w1
    2678:	1e 40 90    	mov.b     [w14+1], w0
    267a:	00 80 fb    	ze        w0, w0
    267c:	80 80 40    	add.w     w1, w0, w1
    267e:	60 45 80    	mov.w     0x8ac, w0
    2680:	10 41 78    	mov.b     [w0], w2
    2682:	82 48 78    	mov.b     w2, [w1]
    2684:	00 00 e8    	inc.w     w0, w0
    2686:	60 45 88    	mov.w     w0, 0x8ac
    2688:	1e 40 90    	mov.b     [w14+1], w0
    268a:	00 40 e8    	inc.b     w0, w0
    268c:	10 47 98    	mov.b     w0, [w14+1]

0000268e <.L148>:
    268e:	1e 40 90    	mov.b     [w14+1], w0
    2690:	9e 4f 50    	sub.b     w0, [w14], [w15]
    2692:	f1 ff 39    	bra       NC, 0x2676 <.L149>
    }
    BD[EP0IN].bytecount = packet_length;
    2694:	40 a0 20    	mov.w     #0xa04, w0
    2696:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    2698:	50 a0 20    	mov.w     #0xa05, w0
    269a:	10 40 78    	mov.b     [w0], w0
    269c:	00 c0 ea    	com.b     w0, w0
    269e:	02 c4 b3    	mov.b     #0x40, w2
    26a0:	82 40 60    	and.b     w0, w2, w1
    26a2:	80 c8 b3    	mov.b     #0x88, w0
    26a4:	00 c0 70    	ior.b     w1, w0, w0
    26a6:	80 40 78    	mov.b     w0, w1
    26a8:	50 a0 20    	mov.w     #0xa05, w0
    26aa:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    26ac:	70 45 80    	mov.w     0x8ae, w0
    26ae:	00 00 e0    	cp0.w     w0
    26b0:	0f 00 3a    	bra       NZ, 0x26d0 <.L145>
        if (USB_request.done_callback)
    26b2:	80 45 80    	mov.w     0x8b0, w0
    26b4:	00 00 e0    	cp0.w     w0
    26b6:	02 00 32    	bra       Z, 0x26bc <.L151>
            USB_request.done_callback();
    26b8:	80 45 80    	mov.w     0x8b0, w0
    26ba:	00 00 01    	call      w0

000026bc <.L151>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    26bc:	40 8a 20    	mov.w     #0x8a4, w0
    26be:	80 c0 eb    	setm.b    w1
    26c0:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    26c2:	50 8a 20    	mov.w     #0x8a5, w0
    26c4:	80 c0 eb    	setm.b    w1
    26c6:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    26c8:	00 00 eb    	clr.w     w0
    26ca:	80 45 88    	mov.w     w0, 0x8b0
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    26cc:	00 00 eb    	clr.w     w0
    26ce:	90 45 88    	mov.w     w0, 0x8b2

000026d0 <.L145>:
    }
}
    26d0:	00 80 fa    	ulnk      
    26d2:	00 00 06    	return    

000026d4 <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    26d4:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    26d6:	00 40 eb    	clr.b     w0
    26d8:	00 4f 78    	mov.b     w0, [w14]
    26da:	09 00 37    	bra       0x26ee <.L153>

000026dc <.L154>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    26dc:	60 45 80    	mov.w     0x8ac, w0
    26de:	12 50 80    	mov.w     0xa02, w2
    26e0:	9e 80 fb    	ze        [w14], w1
    26e2:	81 00 41    	add.w     w2, w1, w1
    26e4:	91 40 78    	mov.b     [w1], w1
    26e6:	01 48 78    	mov.b     w1, [w0]
    26e8:	00 00 e8    	inc.w     w0, w0
    26ea:	60 45 88    	mov.w     w0, 0x8ac
    26ec:	1e 4f e8    	inc.b     [w14], [w14]

000026ee <.L153>:
    26ee:	00 a0 20    	mov.w     #0xa00, w0
    26f0:	10 40 78    	mov.b     [w0], w0
    26f2:	9e 4f 50    	sub.b     w0, [w14], [w15]
    26f4:	f3 ff 3e    	bra       GTU, 0x26dc <.L154>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    26f6:	71 45 80    	mov.w     0x8ae, w1
    26f8:	00 a0 20    	mov.w     #0xa00, w0
    26fa:	10 40 78    	mov.b     [w0], w0
    26fc:	00 80 fb    	ze        w0, w0
    26fe:	00 80 50    	sub.w     w1, w0, w0
    2700:	70 45 88    	mov.w     w0, 0x8ae
    if (USB_request.bytes_left.w > 0) {
    2702:	70 45 80    	mov.w     0x8ae, w0
    2704:	00 00 e0    	cp0.w     w0
    2706:	0e 00 32    	bra       Z, 0x2724 <.L155>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2708:	00 a0 20    	mov.w     #0xa00, w0
    270a:	01 c4 b3    	mov.b     #0x40, w1
    270c:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    270e:	10 a0 20    	mov.w     #0xa01, w0
    2710:	10 40 78    	mov.b     [w0], w0
    2712:	00 c0 ea    	com.b     w0, w0
    2714:	02 c4 b3    	mov.b     #0x40, w2
    2716:	82 40 60    	and.b     w0, w2, w1
    2718:	80 c8 b3    	mov.b     #0x88, w0
    271a:	00 c0 70    	ior.b     w1, w0, w0
    271c:	80 40 78    	mov.b     w0, w1
    271e:	10 a0 20    	mov.w     #0xa01, w0
    2720:	01 48 78    	mov.b     w1, [w0]
    2722:	0f 00 37    	bra       0x2742 <.L152>

00002724 <.L155>:
    } else {
        if (USB_request.done_callback)
    2724:	80 45 80    	mov.w     0x8b0, w0
    2726:	00 00 e0    	cp0.w     w0
    2728:	02 00 32    	bra       Z, 0x272e <.L157>
            USB_request.done_callback();
    272a:	80 45 80    	mov.w     0x8b0, w0
    272c:	00 00 01    	call      w0

0000272e <.L157>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    272e:	40 8a 20    	mov.w     #0x8a4, w0
    2730:	80 c0 eb    	setm.b    w1
    2732:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    2734:	50 8a 20    	mov.w     #0x8a5, w0
    2736:	80 c0 eb    	setm.b    w1
    2738:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    273a:	00 00 eb    	clr.w     w0
    273c:	80 45 88    	mov.w     w0, 0x8b0
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    273e:	00 00 eb    	clr.w     w0
    2740:	90 46 88    	mov.w     w0, 0x8d2

00002742 <.L152>:
    }
}
    2742:	00 80 fa    	ulnk      
    2744:	00 00 06    	return    

00002746 <_write_leds>:
    2746:	02 00 fa    	lnk       #0x2
    2748:	ff 3f fc    	disi      #0x3fff
    274a:	00 00 eb    	clr.w     w0
    274c:	00 0f 78    	mov.w     w0, [w14]
    274e:	0b 00 37    	bra       0x2766 <.L2>

00002750 <.L3>:
    2750:	20 95 20    	mov.w     #0x952, w0
    2752:	1e 00 40    	add.w     w0, [w14], w0
    2754:	10 41 78    	mov.b     [w0], w2
    2756:	20 92 20    	mov.w     #0x922, w0
    2758:	1e 00 40    	add.w     w0, [w14], w0
    275a:	90 40 78    	mov.b     [w0], w1
    275c:	20 8f 20    	mov.w     #0x8f2, w0
    275e:	1e 00 40    	add.w     w0, [w14], w0
    2760:	10 40 78    	mov.b     [w0], w0
    2762:	97 f5 07    	rcall     0x1292 <_ws2812b_write> <.LFB1> <.LFE0>
    2764:	1e 0f e8    	inc.w     [w14], [w14]

00002766 <.L2>:
    2766:	f0 02 20    	mov.w     #0x2f, w0
    2768:	9e 00 78    	mov.w     [w14], w1
    276a:	80 8f 50    	sub.w     w1, w0, [w15]
    276c:	f1 ff 36    	bra       LEU, 0x2750 <.L3>
    276e:	52 20 ef    	clr.w     0x52
    2770:	00 80 fa    	ulnk      
    2772:	00 00 06    	return    

00002774 <_flash_all_leds_green>:
    2774:	02 00 fa    	lnk       #0x2
    2776:	00 00 eb    	clr.w     w0
    2778:	00 0f 78    	mov.w     w0, [w14]
    277a:	0d 00 37    	bra       0x2796 <.L5>

0000277c <.L6>:
    277c:	20 8f 20    	mov.w     #0x8f2, w0
    277e:	1e 00 40    	add.w     w0, [w14], w0
    2780:	80 40 eb    	clr.b     w1
    2782:	01 48 78    	mov.b     w1, [w0]
    2784:	20 92 20    	mov.w     #0x922, w0
    2786:	1e 00 40    	add.w     w0, [w14], w0
    2788:	80 c0 eb    	setm.b    w1
    278a:	01 48 78    	mov.b     w1, [w0]
    278c:	20 95 20    	mov.w     #0x952, w0
    278e:	1e 00 40    	add.w     w0, [w14], w0
    2790:	80 40 eb    	clr.b     w1
    2792:	01 48 78    	mov.b     w1, [w0]
    2794:	1e 0f e8    	inc.w     [w14], [w14]

00002796 <.L5>:
    2796:	f0 02 20    	mov.w     #0x2f, w0
    2798:	9e 00 78    	mov.w     [w14], w1
    279a:	80 8f 50    	sub.w     w1, w0, [w15]
    279c:	ef ff 34    	bra       LE, 0x277c <.L6>
    279e:	d3 ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    27a0:	00 00 00    	nop       

000027a2 <.L7>:
    27a2:	21 04 80    	mov.w     0x84, w1
    27a4:	00 08 20    	mov.w     #0x80, w0
    27a6:	00 80 60    	and.w     w1, w0, w0
    27a8:	00 00 e0    	cp0.w     w0
    27aa:	fb ff 32    	bra       Z, 0x27a2 <.L7>
    27ac:	84 e0 a9    	bclr.b    0x84, #0x7
    27ae:	00 00 eb    	clr.w     w0
    27b0:	00 0f 78    	mov.w     w0, [w14]
    27b2:	0d 00 37    	bra       0x27ce <.L8>

000027b4 <.L9>:
    27b4:	20 8f 20    	mov.w     #0x8f2, w0
    27b6:	1e 00 40    	add.w     w0, [w14], w0
    27b8:	80 40 eb    	clr.b     w1
    27ba:	01 48 78    	mov.b     w1, [w0]
    27bc:	20 92 20    	mov.w     #0x922, w0
    27be:	1e 00 40    	add.w     w0, [w14], w0
    27c0:	80 40 eb    	clr.b     w1
    27c2:	01 48 78    	mov.b     w1, [w0]
    27c4:	20 95 20    	mov.w     #0x952, w0
    27c6:	1e 00 40    	add.w     w0, [w14], w0
    27c8:	80 40 eb    	clr.b     w1
    27ca:	01 48 78    	mov.b     w1, [w0]
    27cc:	1e 0f e8    	inc.w     [w14], [w14]

000027ce <.L8>:
    27ce:	f0 02 20    	mov.w     #0x2f, w0
    27d0:	9e 00 78    	mov.w     [w14], w1
    27d2:	80 8f 50    	sub.w     w1, w0, [w15]
    27d4:	ef ff 34    	bra       LE, 0x27b4 <.L9>
    27d6:	b7 ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    27d8:	00 00 00    	nop       

000027da <.L10>:
    27da:	21 04 80    	mov.w     0x84, w1
    27dc:	00 08 20    	mov.w     #0x80, w0
    27de:	00 80 60    	and.w     w1, w0, w0
    27e0:	00 00 e0    	cp0.w     w0
    27e2:	fb ff 32    	bra       Z, 0x27da <.L10>
    27e4:	84 e0 a9    	bclr.b    0x84, #0x7
    27e6:	00 80 fa    	ulnk      
    27e8:	00 00 06    	return    

000027ea <_flash_all_leds_red>:
    27ea:	02 00 fa    	lnk       #0x2
    27ec:	00 00 eb    	clr.w     w0
    27ee:	00 0f 78    	mov.w     w0, [w14]
    27f0:	0d 00 37    	bra       0x280c <.L12>

000027f2 <.L13>:
    27f2:	20 8f 20    	mov.w     #0x8f2, w0
    27f4:	1e 00 40    	add.w     w0, [w14], w0
    27f6:	80 c0 eb    	setm.b    w1
    27f8:	01 48 78    	mov.b     w1, [w0]
    27fa:	20 92 20    	mov.w     #0x922, w0
    27fc:	1e 00 40    	add.w     w0, [w14], w0
    27fe:	80 40 eb    	clr.b     w1
    2800:	01 48 78    	mov.b     w1, [w0]
    2802:	20 95 20    	mov.w     #0x952, w0
    2804:	1e 00 40    	add.w     w0, [w14], w0
    2806:	80 40 eb    	clr.b     w1
    2808:	01 48 78    	mov.b     w1, [w0]
    280a:	1e 0f e8    	inc.w     [w14], [w14]

0000280c <.L12>:
    280c:	f0 02 20    	mov.w     #0x2f, w0
    280e:	9e 00 78    	mov.w     [w14], w1
    2810:	80 8f 50    	sub.w     w1, w0, [w15]
    2812:	ef ff 34    	bra       LE, 0x27f2 <.L13>
    2814:	98 ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2816:	00 00 00    	nop       

00002818 <.L14>:
    2818:	21 04 80    	mov.w     0x84, w1
    281a:	00 08 20    	mov.w     #0x80, w0
    281c:	00 80 60    	and.w     w1, w0, w0
    281e:	00 00 e0    	cp0.w     w0
    2820:	fb ff 32    	bra       Z, 0x2818 <.L14>
    2822:	84 e0 a9    	bclr.b    0x84, #0x7
    2824:	00 00 eb    	clr.w     w0
    2826:	00 0f 78    	mov.w     w0, [w14]
    2828:	0d 00 37    	bra       0x2844 <.L15>

0000282a <.L16>:
    282a:	20 8f 20    	mov.w     #0x8f2, w0
    282c:	1e 00 40    	add.w     w0, [w14], w0
    282e:	80 40 eb    	clr.b     w1
    2830:	01 48 78    	mov.b     w1, [w0]
    2832:	20 92 20    	mov.w     #0x922, w0
    2834:	1e 00 40    	add.w     w0, [w14], w0
    2836:	80 40 eb    	clr.b     w1
    2838:	01 48 78    	mov.b     w1, [w0]
    283a:	20 95 20    	mov.w     #0x952, w0
    283c:	1e 00 40    	add.w     w0, [w14], w0
    283e:	80 40 eb    	clr.b     w1
    2840:	01 48 78    	mov.b     w1, [w0]
    2842:	1e 0f e8    	inc.w     [w14], [w14]

00002844 <.L15>:
    2844:	f0 02 20    	mov.w     #0x2f, w0
    2846:	9e 00 78    	mov.w     [w14], w1
    2848:	80 8f 50    	sub.w     w1, w0, [w15]
    284a:	ef ff 34    	bra       LE, 0x282a <.L16>
    284c:	7c ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    284e:	00 00 00    	nop       

00002850 <.L17>:
    2850:	21 04 80    	mov.w     0x84, w1
    2852:	00 08 20    	mov.w     #0x80, w0
    2854:	00 80 60    	and.w     w1, w0, w0
    2856:	00 00 e0    	cp0.w     w0
    2858:	fb ff 32    	bra       Z, 0x2850 <.L17>
    285a:	84 e0 a9    	bclr.b    0x84, #0x7
    285c:	00 80 fa    	ulnk      
    285e:	00 00 06    	return    

00002860 <_led_show>:
    2860:	02 00 fa    	lnk       #0x2
    2862:	00 00 eb    	clr.w     w0
    2864:	00 0f 78    	mov.w     w0, [w14]
    2866:	0d 00 37    	bra       0x2882 <.L19>

00002868 <.L20>:
    2868:	20 8f 20    	mov.w     #0x8f2, w0
    286a:	1e 00 40    	add.w     w0, [w14], w0
    286c:	80 40 eb    	clr.b     w1
    286e:	01 48 78    	mov.b     w1, [w0]
    2870:	20 92 20    	mov.w     #0x922, w0
    2872:	1e 00 40    	add.w     w0, [w14], w0
    2874:	01 c8 b3    	mov.b     #0x80, w1
    2876:	01 48 78    	mov.b     w1, [w0]
    2878:	20 95 20    	mov.w     #0x952, w0
    287a:	1e 00 40    	add.w     w0, [w14], w0
    287c:	80 40 eb    	clr.b     w1
    287e:	01 48 78    	mov.b     w1, [w0]
    2880:	1e 0f e8    	inc.w     [w14], [w14]

00002882 <.L19>:
    2882:	f0 02 20    	mov.w     #0x2f, w0
    2884:	9e 00 78    	mov.w     [w14], w1
    2886:	80 8f 50    	sub.w     w1, w0, [w15]
    2888:	ef ff 34    	bra       LE, 0x2868 <.L20>
    288a:	5d ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    288c:	00 00 00    	nop       

0000288e <.L21>:
    288e:	20 04 80    	mov.w     0x84, w0
    2890:	68 00 60    	and.w     w0, #0x8, w0
    2892:	00 00 e0    	cp0.w     w0
    2894:	fc ff 32    	bra       Z, 0x288e <.L21>
    2896:	84 60 a9    	bclr.b    0x84, #0x3
    2898:	00 00 eb    	clr.w     w0
    289a:	00 0f 78    	mov.w     w0, [w14]
    289c:	0d 00 37    	bra       0x28b8 <.L22>

0000289e <.L23>:
    289e:	20 8f 20    	mov.w     #0x8f2, w0
    28a0:	1e 00 40    	add.w     w0, [w14], w0
    28a2:	80 40 eb    	clr.b     w1
    28a4:	01 48 78    	mov.b     w1, [w0]
    28a6:	20 92 20    	mov.w     #0x922, w0
    28a8:	1e 00 40    	add.w     w0, [w14], w0
    28aa:	80 40 eb    	clr.b     w1
    28ac:	01 48 78    	mov.b     w1, [w0]
    28ae:	20 95 20    	mov.w     #0x952, w0
    28b0:	1e 00 40    	add.w     w0, [w14], w0
    28b2:	01 c8 b3    	mov.b     #0x80, w1
    28b4:	01 48 78    	mov.b     w1, [w0]
    28b6:	1e 0f e8    	inc.w     [w14], [w14]

000028b8 <.L22>:
    28b8:	f0 02 20    	mov.w     #0x2f, w0
    28ba:	9e 00 78    	mov.w     [w14], w1
    28bc:	80 8f 50    	sub.w     w1, w0, [w15]
    28be:	ef ff 34    	bra       LE, 0x289e <.L23>
    28c0:	42 ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    28c2:	00 00 00    	nop       

000028c4 <.L24>:
    28c4:	20 04 80    	mov.w     0x84, w0
    28c6:	68 00 60    	and.w     w0, #0x8, w0
    28c8:	00 00 e0    	cp0.w     w0
    28ca:	fc ff 32    	bra       Z, 0x28c4 <.L24>
    28cc:	84 60 a9    	bclr.b    0x84, #0x3
    28ce:	00 00 eb    	clr.w     w0
    28d0:	00 0f 78    	mov.w     w0, [w14]
    28d2:	0d 00 37    	bra       0x28ee <.L25>

000028d4 <.L26>:
    28d4:	20 8f 20    	mov.w     #0x8f2, w0
    28d6:	1e 00 40    	add.w     w0, [w14], w0
    28d8:	81 cc b3    	mov.b     #0xc8, w1
    28da:	01 48 78    	mov.b     w1, [w0]
    28dc:	20 92 20    	mov.w     #0x922, w0
    28de:	1e 00 40    	add.w     w0, [w14], w0
    28e0:	81 cc b3    	mov.b     #0xc8, w1
    28e2:	01 48 78    	mov.b     w1, [w0]
    28e4:	20 95 20    	mov.w     #0x952, w0
    28e6:	1e 00 40    	add.w     w0, [w14], w0
    28e8:	80 40 eb    	clr.b     w1

  for(i = 0; i < NUM_LEDS; i++) {
    red[i] = 200;
    green[i] = 200;
    blue[i] = 0;
    28ea:	01 48 78    	mov.b     w1, [w0]
    28ec:	1e 0f e8    	inc.w     [w14], [w14]

000028ee <.L25>:
    28ee:	f0 02 20    	mov.w     #0x2f, w0
    28f0:	9e 00 78    	mov.w     [w14], w1
    28f2:	80 8f 50    	sub.w     w1, w0, [w15]
    28f4:	ef ff 34    	bra       LE, 0x28d4 <.L26>
  }
  write_leds();
    28f6:	27 ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
  while(IFS0bits.T1IF == 0) {}
    28f8:	00 00 00    	nop       

000028fa <.L27>:
    28fa:	20 04 80    	mov.w     0x84, w0
    28fc:	68 00 60    	and.w     w0, #0x8, w0
    28fe:	00 00 e0    	cp0.w     w0
    2900:	fc ff 32    	bra       Z, 0x28fa <.L27>
  IFS0bits.T1IF = 0;
    2902:	84 60 a9    	bclr.b    0x84, #0x3

  for(i = 0; i < NUM_LEDS; i++) {
    2904:	00 00 eb    	clr.w     w0
    2906:	00 0f 78    	mov.w     w0, [w14]
    2908:	0d 00 37    	bra       0x2924 <.L28>

0000290a <.L29>:
    red[i] = 128;
    290a:	20 8f 20    	mov.w     #0x8f2, w0
    290c:	1e 00 40    	add.w     w0, [w14], w0
    290e:	01 c8 b3    	mov.b     #0x80, w1
    2910:	01 48 78    	mov.b     w1, [w0]
    green[i] = 0;
    2912:	20 92 20    	mov.w     #0x922, w0
    2914:	1e 00 40    	add.w     w0, [w14], w0
    2916:	80 40 eb    	clr.b     w1
    2918:	01 48 78    	mov.b     w1, [w0]
    blue[i] = 128;
    291a:	20 95 20    	mov.w     #0x952, w0
    291c:	1e 00 40    	add.w     w0, [w14], w0
    291e:	01 c8 b3    	mov.b     #0x80, w1
    2920:	01 48 78    	mov.b     w1, [w0]
    2922:	1e 0f e8    	inc.w     [w14], [w14]

00002924 <.L28>:
    2924:	f0 02 20    	mov.w     #0x2f, w0
    2926:	9e 00 78    	mov.w     [w14], w1
    2928:	80 8f 50    	sub.w     w1, w0, [w15]
    292a:	ef ff 34    	bra       LE, 0x290a <.L29>
  }
  write_leds();
    292c:	0c ff 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
  while(IFS0bits.T1IF == 0) {}
    292e:	00 00 00    	nop       

00002930 <.L30>:
    2930:	20 04 80    	mov.w     0x84, w0
    2932:	68 00 60    	and.w     w0, #0x8, w0
    2934:	00 00 e0    	cp0.w     w0
    2936:	fc ff 32    	bra       Z, 0x2930 <.L30>
  IFS0bits.T1IF = 0;
    2938:	84 60 a9    	bclr.b    0x84, #0x3
}
    293a:	00 80 fa    	ulnk      
    293c:	00 00 06    	return    

0000293e <_clear_all_leds>:


void clear_all_leds() {
    293e:	02 00 fa    	lnk       #0x2
  int16_t i;

  for(i = 0; i < NUM_LEDS; i++) {
    2940:	00 00 eb    	clr.w     w0
    2942:	00 0f 78    	mov.w     w0, [w14]
    2944:	0d 00 37    	bra       0x2960 <.L32>

00002946 <.L33>:
    red[i] = 0;
    2946:	20 8f 20    	mov.w     #0x8f2, w0
    2948:	1e 00 40    	add.w     w0, [w14], w0
    294a:	80 40 eb    	clr.b     w1
    294c:	01 48 78    	mov.b     w1, [w0]
    green[i] = 0;
    294e:	20 92 20    	mov.w     #0x922, w0
    2950:	1e 00 40    	add.w     w0, [w14], w0
    2952:	80 40 eb    	clr.b     w1
    2954:	01 48 78    	mov.b     w1, [w0]
    blue[i] = 0;
    2956:	20 95 20    	mov.w     #0x952, w0
    2958:	1e 00 40    	add.w     w0, [w14], w0
    295a:	80 40 eb    	clr.b     w1
    295c:	01 48 78    	mov.b     w1, [w0]
    295e:	1e 0f e8    	inc.w     [w14], [w14]

00002960 <.L32>:
    2960:	f0 02 20    	mov.w     #0x2f, w0
    2962:	9e 00 78    	mov.w     [w14], w1
    2964:	80 8f 50    	sub.w     w1, w0, [w15]
    2966:	ef ff 34    	bra       LE, 0x2946 <.L33>
  }
}
    2968:	00 80 fa    	ulnk      
    296a:	00 00 06    	return    

0000296c <_main>:


int16_t main(void) {
    296c:	04 00 fa    	lnk       #0x4
    init_elecanisms();
    296e:	59 01 07    	rcall     0x2c22 <_init_elecanisms> <.L0> <.LFB0> <.LFE5> <.Letext0> <.Ltext0>
    D0_OD = 1;
    2970:	de a2 a8    	bset.b    0x2de, #0x5
    init_ws2812b();
    2972:	8a f4 07    	rcall     0x1288 <_init_ws2812b> <.L0> <.LFB0> <.Ltext0>

    int16_t i;

    T1CON = 0x0030;         // set Timer1 period to 0.5s
    2974:	00 03 20    	mov.w     #0x30, w0
    2976:	20 08 88    	mov.w     w0, 0x104
    PR1 = 0x7A11/5;        //dividing by 10 to get 50 microseconds
    2978:	90 86 21    	mov.w     #0x1869, w0
    297a:	10 08 88    	mov.w     w0, 0x102
    TMR1 = 0;               // set Timer1 count to 0
    297c:	00 21 ef    	clr.w     0x100
    IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    297e:	84 60 a9    	bclr.b    0x84, #0x3
    T1CONbits.TON = 1;      // turn on Timer1
    2980:	05 e1 a8    	bset.b    0x105, #0x7


    T2CON = 0x0030;         // set Timer2 period to 0.5s
    2982:	00 03 20    	mov.w     #0x30, w0
    2984:	80 08 88    	mov.w     w0, 0x110
    PR2 = 0x7A11/10;
    2986:	40 c3 20    	mov.w     #0xc34, w0
    2988:	60 08 88    	mov.w     w0, 0x10c
    TMR2 = 0;               // set Timer1 count to 0
    298a:	06 21 ef    	clr.w     0x106
    IFS0bits.T2IF = 0;      // lower Timer1 interrupt flag
    298c:	84 e0 a9    	bclr.b    0x84, #0x7
    T2CONbits.TON = 1;      // turn on Timer1
    298e:	11 e1 a8    	bset.b    0x111, #0x7


    T3CON = 0x0030;         // set Timer2 period to 0.5s
    2990:	00 03 20    	mov.w     #0x30, w0
    2992:	90 08 88    	mov.w     w0, 0x112
    PR3 = 0x7A11/15;
    2994:	30 82 20    	mov.w     #0x823, w0
    2996:	70 08 88    	mov.w     w0, 0x10e
    TMR3 = 0;               // set Timer1 count to 0
    2998:	0a 21 ef    	clr.w     0x10a
    IFS0bits.T3IF = 0;      // lower Timer1 interrupt flag
    299a:	85 00 a9    	bclr.b    0x85, #0x0
    T3CONbits.TON = 1;      // turn on Timer1
    299c:	13 e1 a8    	bset.b    0x113, #0x7


    T4CON = 0x0030;         // set Timer2 period to 0.5s
    299e:	00 03 20    	mov.w     #0x30, w0
    29a0:	f0 08 88    	mov.w     w0, 0x11e
    PR4 = 0x7A11/20;
    29a2:	a0 61 20    	mov.w     #0x61a, w0
    29a4:	d0 08 88    	mov.w     w0, 0x11a
    TMR4 = 0;               // set Timer1 count to 0
    29a6:	14 21 ef    	clr.w     0x114
    IFS1bits.T4IF = 0;      // lower Timer1 interrupt flag
    29a8:	87 60 a9    	bclr.b    0x87, #0x3
    T4CONbits.TON = 1;      // turn on Timer1
    29aa:	1f e1 a8    	bset.b    0x11f, #0x7


    T5CON = 0x0030;         // set Timer2 period to 0.5s
    29ac:	00 03 20    	mov.w     #0x30, w0
    29ae:	00 09 88    	mov.w     w0, 0x120
    PR5 = 0x7A11/25;
    29b0:	10 4e 20    	mov.w     #0x4e1, w0
    29b2:	e0 08 88    	mov.w     w0, 0x11c
    TMR5 = 0;               // set Timer1 count to 0
    29b4:	18 21 ef    	clr.w     0x118
    IFS1bits.T5IF = 0;      // lower Timer1 interrupt flag
    29b6:	87 80 a9    	bclr.b    0x87, #0x4
    T5CONbits.TON = 1;      // turn on Timer1
    29b8:	21 e1 a8    	bset.b    0x121, #0x7

    state = READY_TO_PLAY;
    29ba:	a0 00 20    	mov.w     #0xa, w0
    29bc:	f0 40 88    	mov.w     w0, 0x81e
    29be:	01 00 37    	bra       0x29c2 <.L82>

000029c0 <.L83>:

    while (1) {
        switch (state) {
            case READY_TO_PLAY:
                if(D1 == 1)  {
                  state = DIFFICULTY_SELECTION;
                }
                break;

            case DIFFICULTY_SELECTION:
                if(difficulty == 1){
                  state = EASY;
                }
                if(difficulty == 2){
                  state = MEDIUM;
                }
                if(difficulty == 3){
                  state = HARD;
                }
                if(difficulty == 4){
                  state = ON_SPEED;
                }
                if(difficulty == 5){
                  state = MISSION_IMPOSSIBLE;
                }
                break;

            case EASY:
                clear_all_leds();
                green[LEDaddress] = 128;
                red[CENTER_LED] = 128;
                write_leds();
                LEDaddress++;

                if (LEDaddress == NUM_LEDS) {
                     LEDaddress = 0;
                }

                while(IFS0bits.T1IF == 0) {}
                IFS0bits.T1IF = 0;

                if(D2 == 1) {   //pressing the playbutton
                    state = DONE;
                }
                break;

            case MEDIUM:
                clear_all_leds();
                green[LEDaddress] = 128;
                red[CENTER_LED] = 128;
                write_leds();
                LEDaddress++;

                if (LEDaddress == NUM_LEDS) {
                      LEDaddress = 0;
                }

                while(IFS0bits.T2IF == 0) {}
                IFS0bits.T2IF = 0;

                if(D2 == 1) {   //pressing the playbutton
                    state = DONE;
                }
                break;

            case HARD:
                clear_all_leds();
                green[LEDaddress] = 128;
                red[CENTER_LED] = 128;
                write_leds();
                LEDaddress++;

                if (LEDaddress == NUM_LEDS) {
                      LEDaddress = 0;
                }

                while(IFS0bits.T3IF == 0) {}
                IFS0bits.T3IF = 0;

                if(D2 == 1) {   //pressing the playbutton
                    state = DONE;
                }
                break;
            case ON_SPEED:
                clear_all_leds();
                green[LEDaddress] = 128;
                red[CENTER_LED] = 128;
                write_leds();
                LEDaddress++;

                if (LEDaddress == NUM_LEDS) {
                      LEDaddress = 0;
                }

                while(IFS1bits.T4IF == 0) {}
                IFS1bits.T4IF = 0;

                if(D2 == 1) {   //pressing the playbutton
                    state = DONE;
                }
                break;
            case MISSION_IMPOSSIBLE:
                clear_all_leds();
                green[LEDaddress] = 128;
                red[CENTER_LED] = 128;
                write_leds();
                LEDaddress++;

                if (LEDaddress == NUM_LEDS) {
                      LEDaddress = 0;
                }

                while(IFS1bits.T5IF == 0) {}
                IFS1bits.T5IF = 0;

                if(D2 == 1) {   //pressing the playbutton
                    state = DONE;
                }
                break;

            case DONE:
                clear_all_leds();
                red[CENTER_LED] = 128;
                green[LEDaddress] = 128;
                write_leds();

                int diff = abs(CENTER_LED - LEDaddress);
                if(diff == 0) {
                  if(difficulty < 5)  {
                    state = FLASH_ALL_LEDS_GREEN_4_TIMES;
                  }
                  if(difficulty == 5)  {
                    difficulty = 1;
                    state = LED_SHOW;
                  }
                  difficulty++;
                }
                else  {
                  state = FLASH_ALL_LEDS_RED_4_TIMES;
                }
                break;

            case  FLASH_ALL_LEDS_GREEN_4_TIMES:
                clear_all_leds();
                while(IFS0bits.T1IF == 0) {}
                IFS0bits.T1IF = 0;
                for(i = 0; i < 4; i++)  {
                  flash_all_leds_green();
                }
                state = DIFFICULTY_SELECTION;
                break;


            case FLASH_ALL_LEDS_RED_4_TIMES:
                clear_all_leds();
                while(IFS0bits.T1IF == 0) {}
                IFS0bits.T1IF = 0;
                for(i = 0; i < 4; i++)  {
                  flash_all_leds_red();
                }
                difficulty = 1;
                LEDaddress = 0;
                state = READY_TO_PLAY;
                break;

            case LED_SHOW:
                clear_all_leds();
                while(IFS0bits.T1IF == 0) {}
                IFS0bits.T1IF = 0;
                for(i = 0; i < 10; i++)  {
                  led_show();
                }
                state = READY_TO_PLAY;
                break;
        }
    }
    29c0:	00 00 00    	nop       

000029c2 <.L82>:
    29c2:	f0 40 80    	mov.w     0x81e, w0
    29c4:	80 00 eb    	clr.w     w1
    29c6:	a2 00 20    	mov.w     #0xa, w2
    29c8:	03 00 20    	mov.w     #0x0, w3
    29ca:	82 0f 50    	sub.w     w0, w2, [w15]
    29cc:	83 8f 58    	subb.w    w1, w3, [w15]
    29ce:	f8 ff 3e    	bra       GTU, 0x29c0 <.L83>
    29d0:	00 60 01    	bra       w0
    29d2:	2a 00 37    	bra       0x2a28 <.L36>
    29d4:	48 00 37    	bra       0x2a66 <.L37>
    29d6:	67 00 37    	bra       0x2aa6 <.L38>
    29d8:	86 00 37    	bra       0x2ae6 <.L39>
    29da:	a5 00 37    	bra       0x2b26 <.L40>
    29dc:	0c 00 37    	bra       0x29f6 <.L41>
    29de:	c3 00 37    	bra       0x2b66 <.L42>
    29e0:	e6 00 37    	bra       0x2bae <.L43>
    29e2:	f7 00 37    	bra       0x2bd2 <.L44>
    29e4:	0b 01 37    	bra       0x2bfc <.L45>
    29e6:	00 00 37    	bra       0x29e8 <.L46> <.LBB2>

000029e8 <.L46>:
    29e8:	d0 16 80    	mov.w     0x2da, w0
    29ea:	70 00 60    	and.w     w0, #0x10, w0
    29ec:	00 00 e0    	cp0.w     w0
    29ee:	02 00 32    	bra       Z, 0x29f4 <.L48>
    29f0:	50 00 20    	mov.w     #0x5, w0
    29f2:	f0 40 88    	mov.w     w0, 0x81e

000029f4 <.L48>:
    29f4:	15 01 37    	bra       0x2c20 <.L35> <.LBE2>

000029f6 <.L41>:
    29f6:	10 41 80    	mov.w     0x822, w0
    29f8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    29fa:	01 00 3a    	bra       NZ, 0x29fe <.L49>
    29fc:	1e 28 ef    	clr.w     0x81e

000029fe <.L49>:
    29fe:	10 41 80    	mov.w     0x822, w0
    2a00:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2a02:	02 00 3a    	bra       NZ, 0x2a08 <.L50>
    2a04:	10 00 20    	mov.w     #0x1, w0
    2a06:	f0 40 88    	mov.w     w0, 0x81e

00002a08 <.L50>:
    2a08:	10 41 80    	mov.w     0x822, w0
    2a0a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2a0c:	02 00 3a    	bra       NZ, 0x2a12 <.L51>
    2a0e:	20 00 20    	mov.w     #0x2, w0
    2a10:	f0 40 88    	mov.w     w0, 0x81e

00002a12 <.L51>:
    2a12:	10 41 80    	mov.w     0x822, w0
    2a14:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    2a16:	02 00 3a    	bra       NZ, 0x2a1c <.L52>
    2a18:	30 00 20    	mov.w     #0x3, w0
    2a1a:	f0 40 88    	mov.w     w0, 0x81e

00002a1c <.L52>:
    2a1c:	10 41 80    	mov.w     0x822, w0
    2a1e:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2a20:	02 00 3a    	bra       NZ, 0x2a26 <.L53>
    2a22:	40 00 20    	mov.w     #0x4, w0
    2a24:	f0 40 88    	mov.w     w0, 0x81e

00002a26 <.L53>:
    2a26:	fc 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002a28 <.L36>:
    2a28:	8a ff 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2a2a:	e0 40 80    	mov.w     0x81c, w0
    2a2c:	21 92 20    	mov.w     #0x922, w1
    2a2e:	02 c8 b3    	mov.b     #0x80, w2
    2a30:	82 70 78    	mov.b     w2, [w1+w0]
    2a32:	70 90 20    	mov.w     #0x907, w0
    2a34:	01 c8 b3    	mov.b     #0x80, w1
    2a36:	01 48 78    	mov.b     w1, [w0]
    2a38:	86 fe 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2a3a:	e0 40 80    	mov.w     0x81c, w0
    2a3c:	00 00 e8    	inc.w     w0, w0
    2a3e:	e0 40 88    	mov.w     w0, 0x81c
    2a40:	e1 40 80    	mov.w     0x81c, w1
    2a42:	00 03 20    	mov.w     #0x30, w0
    2a44:	80 8f 50    	sub.w     w1, w0, [w15]
    2a46:	02 00 3a    	bra       NZ, 0x2a4c <.L84>
    2a48:	1c 28 ef    	clr.w     0x81c
    2a4a:	01 00 37    	bra       0x2a4e <.L55>

00002a4c <.L84>:
    2a4c:	00 00 00    	nop       

00002a4e <.L55>:
    2a4e:	20 04 80    	mov.w     0x84, w0
    2a50:	68 00 60    	and.w     w0, #0x8, w0
    2a52:	00 00 e0    	cp0.w     w0
    2a54:	fc ff 32    	bra       Z, 0x2a4e <.L55>
    2a56:	84 60 a9    	bclr.b    0x84, #0x3
    2a58:	50 17 80    	mov.w     0x2ea, w0
    2a5a:	70 00 60    	and.w     w0, #0x10, w0
    2a5c:	00 00 e0    	cp0.w     w0
    2a5e:	02 00 32    	bra       Z, 0x2a64 <.L56>
    2a60:	60 00 20    	mov.w     #0x6, w0
    2a62:	f0 40 88    	mov.w     w0, 0x81e

00002a64 <.L56>:
    2a64:	dd 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002a66 <.L37>:
    2a66:	6b ff 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2a68:	e0 40 80    	mov.w     0x81c, w0
    2a6a:	21 92 20    	mov.w     #0x922, w1
    2a6c:	02 c8 b3    	mov.b     #0x80, w2
    2a6e:	82 70 78    	mov.b     w2, [w1+w0]
    2a70:	70 90 20    	mov.w     #0x907, w0
    2a72:	01 c8 b3    	mov.b     #0x80, w1
    2a74:	01 48 78    	mov.b     w1, [w0]
    2a76:	67 fe 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2a78:	e0 40 80    	mov.w     0x81c, w0
    2a7a:	00 00 e8    	inc.w     w0, w0
    2a7c:	e0 40 88    	mov.w     w0, 0x81c
    2a7e:	e1 40 80    	mov.w     0x81c, w1
    2a80:	00 03 20    	mov.w     #0x30, w0
    2a82:	80 8f 50    	sub.w     w1, w0, [w15]
    2a84:	02 00 3a    	bra       NZ, 0x2a8a <.L85>
    2a86:	1c 28 ef    	clr.w     0x81c
    2a88:	01 00 37    	bra       0x2a8c <.L58>

00002a8a <.L85>:
    2a8a:	00 00 00    	nop       

00002a8c <.L58>:
    2a8c:	21 04 80    	mov.w     0x84, w1
    2a8e:	00 08 20    	mov.w     #0x80, w0
    2a90:	00 80 60    	and.w     w1, w0, w0
    2a92:	00 00 e0    	cp0.w     w0
    2a94:	fb ff 32    	bra       Z, 0x2a8c <.L58>
    2a96:	84 e0 a9    	bclr.b    0x84, #0x7
    2a98:	50 17 80    	mov.w     0x2ea, w0
    2a9a:	70 00 60    	and.w     w0, #0x10, w0
    2a9c:	00 00 e0    	cp0.w     w0
    2a9e:	02 00 32    	bra       Z, 0x2aa4 <.L59>
    2aa0:	60 00 20    	mov.w     #0x6, w0
    2aa2:	f0 40 88    	mov.w     w0, 0x81e

00002aa4 <.L59>:
    2aa4:	bd 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002aa6 <.L38>:
    2aa6:	4b ff 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2aa8:	e0 40 80    	mov.w     0x81c, w0
    2aaa:	21 92 20    	mov.w     #0x922, w1
    2aac:	02 c8 b3    	mov.b     #0x80, w2
    2aae:	82 70 78    	mov.b     w2, [w1+w0]
    2ab0:	70 90 20    	mov.w     #0x907, w0
    2ab2:	01 c8 b3    	mov.b     #0x80, w1
    2ab4:	01 48 78    	mov.b     w1, [w0]
    2ab6:	47 fe 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2ab8:	e0 40 80    	mov.w     0x81c, w0
    2aba:	00 00 e8    	inc.w     w0, w0
    2abc:	e0 40 88    	mov.w     w0, 0x81c
    2abe:	e1 40 80    	mov.w     0x81c, w1
    2ac0:	00 03 20    	mov.w     #0x30, w0
    2ac2:	80 8f 50    	sub.w     w1, w0, [w15]
    2ac4:	02 00 3a    	bra       NZ, 0x2aca <.L86>
    2ac6:	1c 28 ef    	clr.w     0x81c
    2ac8:	01 00 37    	bra       0x2acc <.L61>

00002aca <.L86>:
    2aca:	00 00 00    	nop       

00002acc <.L61>:
    2acc:	21 04 80    	mov.w     0x84, w1
    2ace:	00 10 20    	mov.w     #0x100, w0
    2ad0:	00 80 60    	and.w     w1, w0, w0
    2ad2:	00 00 e0    	cp0.w     w0
    2ad4:	fb ff 32    	bra       Z, 0x2acc <.L61>
    2ad6:	85 00 a9    	bclr.b    0x85, #0x0
    2ad8:	50 17 80    	mov.w     0x2ea, w0
    2ada:	70 00 60    	and.w     w0, #0x10, w0
    2adc:	00 00 e0    	cp0.w     w0
    2ade:	02 00 32    	bra       Z, 0x2ae4 <.L62>
    2ae0:	60 00 20    	mov.w     #0x6, w0
    2ae2:	f0 40 88    	mov.w     w0, 0x81e

00002ae4 <.L62>:
    2ae4:	9d 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002ae6 <.L39>:
    2ae6:	2b ff 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2ae8:	e0 40 80    	mov.w     0x81c, w0
    2aea:	21 92 20    	mov.w     #0x922, w1
    2aec:	02 c8 b3    	mov.b     #0x80, w2
    2aee:	82 70 78    	mov.b     w2, [w1+w0]
    2af0:	70 90 20    	mov.w     #0x907, w0
    2af2:	01 c8 b3    	mov.b     #0x80, w1
    2af4:	01 48 78    	mov.b     w1, [w0]
    2af6:	27 fe 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2af8:	e0 40 80    	mov.w     0x81c, w0
    2afa:	00 00 e8    	inc.w     w0, w0
    2afc:	e0 40 88    	mov.w     w0, 0x81c
    2afe:	e1 40 80    	mov.w     0x81c, w1
    2b00:	00 03 20    	mov.w     #0x30, w0
    2b02:	80 8f 50    	sub.w     w1, w0, [w15]
    2b04:	02 00 3a    	bra       NZ, 0x2b0a <.L87>
    2b06:	1c 28 ef    	clr.w     0x81c
    2b08:	01 00 37    	bra       0x2b0c <.L64>

00002b0a <.L87>:
    2b0a:	00 00 00    	nop       

00002b0c <.L64>:
    2b0c:	31 04 80    	mov.w     0x86, w1
    2b0e:	00 80 20    	mov.w     #0x800, w0
    2b10:	00 80 60    	and.w     w1, w0, w0
    2b12:	00 00 e0    	cp0.w     w0
    2b14:	fb ff 32    	bra       Z, 0x2b0c <.L64>
    2b16:	87 60 a9    	bclr.b    0x87, #0x3
    2b18:	50 17 80    	mov.w     0x2ea, w0
    2b1a:	70 00 60    	and.w     w0, #0x10, w0
    2b1c:	00 00 e0    	cp0.w     w0
    2b1e:	02 00 32    	bra       Z, 0x2b24 <.L65>
    2b20:	60 00 20    	mov.w     #0x6, w0
    2b22:	f0 40 88    	mov.w     w0, 0x81e

00002b24 <.L65>:
    2b24:	7d 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002b26 <.L40>:
    2b26:	0b ff 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2b28:	e0 40 80    	mov.w     0x81c, w0
    2b2a:	21 92 20    	mov.w     #0x922, w1
    2b2c:	02 c8 b3    	mov.b     #0x80, w2
    2b2e:	82 70 78    	mov.b     w2, [w1+w0]
    2b30:	70 90 20    	mov.w     #0x907, w0
    2b32:	01 c8 b3    	mov.b     #0x80, w1
    2b34:	01 48 78    	mov.b     w1, [w0]
    2b36:	07 fe 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b38:	e0 40 80    	mov.w     0x81c, w0
    2b3a:	00 00 e8    	inc.w     w0, w0
    2b3c:	e0 40 88    	mov.w     w0, 0x81c
    2b3e:	e1 40 80    	mov.w     0x81c, w1
    2b40:	00 03 20    	mov.w     #0x30, w0
    2b42:	80 8f 50    	sub.w     w1, w0, [w15]
    2b44:	02 00 3a    	bra       NZ, 0x2b4a <.L88>
    2b46:	1c 28 ef    	clr.w     0x81c
    2b48:	01 00 37    	bra       0x2b4c <.L67>

00002b4a <.L88>:
    2b4a:	00 00 00    	nop       

00002b4c <.L67>:
    2b4c:	31 04 80    	mov.w     0x86, w1
    2b4e:	00 00 21    	mov.w     #0x1000, w0
    2b50:	00 80 60    	and.w     w1, w0, w0
    2b52:	00 00 e0    	cp0.w     w0
    2b54:	fb ff 32    	bra       Z, 0x2b4c <.L67>
    2b56:	87 80 a9    	bclr.b    0x87, #0x4
    2b58:	50 17 80    	mov.w     0x2ea, w0
    2b5a:	70 00 60    	and.w     w0, #0x10, w0
    2b5c:	00 00 e0    	cp0.w     w0
    2b5e:	02 00 32    	bra       Z, 0x2b64 <.L68>
    2b60:	60 00 20    	mov.w     #0x6, w0
    2b62:	f0 40 88    	mov.w     w0, 0x81e

00002b64 <.L68>:
    2b64:	5d 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002b66 <.L42>:
    2b66:	eb fe 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2b68:	70 90 20    	mov.w     #0x907, w0
    2b6a:	01 c8 b3    	mov.b     #0x80, w1
    2b6c:	01 48 78    	mov.b     w1, [w0]
    2b6e:	e0 40 80    	mov.w     0x81c, w0
    2b70:	21 92 20    	mov.w     #0x922, w1
    2b72:	02 c8 b3    	mov.b     #0x80, w2
    2b74:	82 70 78    	mov.b     w2, [w1+w0]
    2b76:	e7 fd 07    	rcall     0x2746 <_write_leds> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b78:	e0 40 80    	mov.w     0x81c, w0
    2b7a:	75 00 10    	subr.w    w0, #0x15, w0
    2b7c:	00 f0 a7    	btsc.w    w0, #0xf
    2b7e:	00 00 ea    	neg.w     w0, w0
    2b80:	10 07 98    	mov.w     w0, [w14+2]
    2b82:	1e 00 90    	mov.w     [w14+2], w0
    2b84:	00 00 e0    	cp0.w     w0
    2b86:	10 00 3a    	bra       NZ, 0x2ba8 <.L69>
    2b88:	10 41 80    	mov.w     0x822, w0
    2b8a:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    2b8c:	02 00 3c    	bra       GT, 0x2b92 <.L70>
    2b8e:	70 00 20    	mov.w     #0x7, w0
    2b90:	f0 40 88    	mov.w     w0, 0x81e

00002b92 <.L70>:
    2b92:	10 41 80    	mov.w     0x822, w0
    2b94:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2b96:	04 00 3a    	bra       NZ, 0x2ba0 <.L71>
    2b98:	10 00 20    	mov.w     #0x1, w0
    2b9a:	10 41 88    	mov.w     w0, 0x822
    2b9c:	90 00 20    	mov.w     #0x9, w0
    2b9e:	f0 40 88    	mov.w     w0, 0x81e

00002ba0 <.L71>:
    2ba0:	10 41 80    	mov.w     0x822, w0
    2ba2:	00 00 e8    	inc.w     w0, w0
    2ba4:	10 41 88    	mov.w     w0, 0x822
    2ba6:	02 00 37    	bra       0x2bac <.L72>

00002ba8 <.L69>:
    2ba8:	80 00 20    	mov.w     #0x8, w0
    2baa:	f0 40 88    	mov.w     w0, 0x81e

00002bac <.L72>:
    2bac:	39 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002bae <.L43>:
    2bae:	c7 fe 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2bb0:	00 00 00    	nop       

00002bb2 <.L73>:
    2bb2:	20 04 80    	mov.w     0x84, w0
    2bb4:	68 00 60    	and.w     w0, #0x8, w0
    2bb6:	00 00 e0    	cp0.w     w0
    2bb8:	fc ff 32    	bra       Z, 0x2bb2 <.L73>
    2bba:	84 60 a9    	bclr.b    0x84, #0x3
    2bbc:	00 00 eb    	clr.w     w0
    2bbe:	00 0f 78    	mov.w     w0, [w14]
    2bc0:	02 00 37    	bra       0x2bc6 <.L74>

00002bc2 <.L75>:
    2bc2:	d8 fd 07    	rcall     0x2774 <_flash_all_leds_green> <.LFB1> <.LFE0>
    2bc4:	1e 0f e8    	inc.w     [w14], [w14]

00002bc6 <.L74>:
    2bc6:	1e 00 78    	mov.w     [w14], w0
    2bc8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2bca:	fb ff 34    	bra       LE, 0x2bc2 <.L75>
    2bcc:	50 00 20    	mov.w     #0x5, w0
    2bce:	f0 40 88    	mov.w     w0, 0x81e
    2bd0:	27 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002bd2 <.L44>:
    2bd2:	b5 fe 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2bd4:	00 00 00    	nop       

00002bd6 <.L76>:
    2bd6:	20 04 80    	mov.w     0x84, w0
    2bd8:	68 00 60    	and.w     w0, #0x8, w0
    2bda:	00 00 e0    	cp0.w     w0
    2bdc:	fc ff 32    	bra       Z, 0x2bd6 <.L76>
    2bde:	84 60 a9    	bclr.b    0x84, #0x3
    2be0:	00 00 eb    	clr.w     w0
    2be2:	00 0f 78    	mov.w     w0, [w14]
    2be4:	02 00 37    	bra       0x2bea <.L77>

00002be6 <.L78>:
    2be6:	01 fe 07    	rcall     0x27ea <_flash_all_leds_red> <.LFB2> <.LFE1> <.Ldebug_info0>
    2be8:	1e 0f e8    	inc.w     [w14], [w14]

00002bea <.L77>:
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2bee:	fb ff 34    	bra       LE, 0x2be6 <.L78>
    2bf0:	10 00 20    	mov.w     #0x1, w0
    2bf2:	10 41 88    	mov.w     w0, 0x822
    2bf4:	1c 28 ef    	clr.w     0x81c
    2bf6:	a0 00 20    	mov.w     #0xa, w0
    2bf8:	f0 40 88    	mov.w     w0, 0x81e
    2bfa:	12 00 37    	bra       0x2c20 <.L35> <.LBE2>

00002bfc <.L45>:
    2bfc:	a0 fe 07    	rcall     0x293e <_clear_all_leds> <.LFB4> <.LFE3>
    2bfe:	00 00 00    	nop       

00002c00 <.L79>:
    2c00:	20 04 80    	mov.w     0x84, w0
    2c02:	68 00 60    	and.w     w0, #0x8, w0
    2c04:	00 00 e0    	cp0.w     w0
    2c06:	fc ff 32    	bra       Z, 0x2c00 <.L79>
    2c08:	84 60 a9    	bclr.b    0x84, #0x3
    2c0a:	00 00 eb    	clr.w     w0
    2c0c:	00 0f 78    	mov.w     w0, [w14]
    2c0e:	02 00 37    	bra       0x2c14 <.L80>

00002c10 <.L81>:
    2c10:	27 fe 07    	rcall     0x2860 <_led_show> <.LFB3> <.LFE2>
    2c12:	1e 0f e8    	inc.w     [w14], [w14]

00002c14 <.L80>:
    2c14:	1e 00 78    	mov.w     [w14], w0
    2c16:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    2c18:	fb ff 34    	bra       LE, 0x2c10 <.L81>
    2c1a:	a0 00 20    	mov.w     #0xa, w0
    2c1c:	f0 40 88    	mov.w     w0, 0x81e
    2c1e:	00 00 00    	nop       

00002c20 <.L35>:
    2c20:	d0 fe 37    	bra       0x29c2 <.L82>

00002c22 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    2c22:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    2c24:	00 10 20    	mov.w     #0x100, w0
    2c26:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    2c28:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    2c2a:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    2c2c:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    2c2e:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    2c30:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    2c32:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    2c34:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    2c36:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    2c38:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    2c3a:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    2c3c:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    2c3e:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    2c40:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    2c42:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    2c44:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    2c46:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    2c48:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    2c4a:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    2c4c:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    2c4e:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    2c50:	f0 03 20    	mov.w     #0x3f, w0
    2c52:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    2c54:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    2c56:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    2c58:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    2c5a:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    2c5c:	00 0e 20    	mov.w     #0xe0, w0
    2c5e:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2c60:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2c62:	00 c4 20    	mov.w     #0xc40, w0
    2c64:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    2c66:	50 00 20    	mov.w     #0x5, w0
    2c68:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    2c6a:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    2c6c:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2c6e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    2c70:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2c72:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2c74:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2c76:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    2c78:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    2c7a:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    2c7c:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    2c7e:	00 80 fa    	ulnk      
    2c80:	00 00 06    	return    

00002c82 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    2c82:	02 00 fa    	lnk       #0x2
    2c84:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    2c86:	9e 00 78    	mov.w     [w14], w1
    2c88:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    2c8a:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    2c8c:	00 00 00    	nop       

00002c8e <.L3>:
    2c8e:	00 19 80    	mov.w     0x320, w0
    2c90:	61 00 60    	and.w     w0, #0x1, w0
    2c92:	00 00 e0    	cp0.w     w0
    2c94:	fc ff 32    	bra       Z, 0x2c8e <.L3>
    return ADC1BUF0;
    2c96:	00 18 80    	mov.w     0x300, w0
}
    2c98:	00 80 fa    	ulnk      
    2c9a:	00 00 06    	return    
Disassembly of section .isr.text:

00002c9c <__USB1Interrupt>:
    2c9c:	36 00 f8    	push      0x36
    2c9e:	80 9f be    	mov.d     w0, [w15++]
    2ca0:	82 9f be    	mov.d     w2, [w15++]
    2ca2:	84 9f be    	mov.d     w4, [w15++]
    2ca4:	86 9f be    	mov.d     w6, [w15++]
    2ca6:	32 00 f8    	push      0x32
    2ca8:	34 00 f8    	push      0x34
    2caa:	10 00 20    	mov.w     #0x1, w0
    2cac:	a0 01 88    	mov.w     w0, 0x34
    2cae:	00 20 20    	mov.w     #0x200, w0
    2cb0:	90 01 88    	mov.w     w0, 0x32
    2cb2:	00 00 fa    	lnk       #0x0
    2cb4:	fb f8 07    	rcall     0x1eac <_usb_service> <.LFB4> <.LFE3>
    2cb6:	00 80 fa    	ulnk      
    2cb8:	34 00 f9    	pop       0x34
    2cba:	32 00 f9    	pop       0x32
    2cbc:	4f 03 be    	mov.d     [--w15], w6
    2cbe:	4f 02 be    	mov.d     [--w15], w4
    2cc0:	4f 01 be    	mov.d     [--w15], w2
    2cc2:	4f 00 be    	mov.d     [--w15], w0
    2cc4:	36 00 f9    	pop       0x36
    2cc6:	00 40 06    	retfie    
Disassembly of section .dinit:

00002cc8 <.dinit>:
    2cc8:	f2 08 00    	nop       
    2cca:	90 00 00    	nop       
    2ccc:	80 00 00    	nop       
    2cce:	1a 08 00    	nop       
    2cd0:	08 00 00    	nop       
    2cd2:	80 00 00    	nop       
    2cd4:	22 08 00    	nop       
    2cd6:	02 00 00    	nop       
    2cd8:	82 00 00    	nop       
    2cda:	01 00 00    	nop       
    2cdc:	24 08 00    	nop       
    2cde:	ce 00 00    	nop       
    2ce0:	80 00 00    	nop       
    2ce2:	00 0a 00    	nop       
    2ce4:	80 00 00    	nop       
    2ce6:	80 00 00    	nop       
    2ce8:	00 08 00    	nop       
    2cea:	1a 00 00    	nop       
    2cec:	80 00 00    	nop       
    2cee:	00 00 00    	nop       
Disassembly of section .isr:

00002cf0 <__DefaultInterrupt>:
    2cf0:	00 40 da    	break     
    2cf2:	00 00 fe    	reset     
